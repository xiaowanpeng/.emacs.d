//******************************************************************
//* Copyright (c) 2003-2009, Asiainfo HangZhou. All rights reserved.
//* OBD generated C++ client skeleton header file.
//* Source filename: FlowManager_db.obd
//* Generated date:  2014-07-21 15:19:23
//* Note: This is a auto-generated file, DON'T MODIFY IT!
//******************************************************************

#ifndef __OBD_C_FLOWMANAGER_DB_OBD_C__
#define __OBD_C_FLOWMANAGER_DB_OBD_C__

// list include files
#include <vector>
#include "otl.h"
#include "openbuffer/obd_data_objs_otl.h"
#include "openbuffer/obd_basic_objs.h"
#include "openbuffer/obd_basic_visitors.h"
#include "openbuffer/obd_type_factory.h"
#include "common/datetime.h"
class CBSErrorMsg;

// main body

namespace MFlowManagerDb
{
    #define OBD_USE_MFLOWMANAGERDB_CPAGEINFO
    class CPageInfo : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_QRY_TYPE,
            IDX_PAGE_ID,
            IDX_PAGE_SIZE,
            IDX_TOTAL_COUNT,
            IDX_SORT_FLAG,
            IDX_SORT_ALIAS,
            IDX_NOTES,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_QRY_TYPE		= 0x1,
            BIT_PAGE_ID		= 0x2,
            BIT_PAGE_SIZE		= 0x4,
            BIT_TOTAL_COUNT		= 0x8,
            BIT_SORT_FLAG		= 0x10,
            BIT_SORT_ALIAS		= 0x20,
            BIT_NOTES		= 0x40,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CPageInfo();
        CPageInfo(const CPageInfo& rhs);
        ~CPageInfo();
        CPageInfo& operator=(const CPageInfo& rhs);
        bool operator==(const CPageInfo& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int16 get_qryType() const
        {
            return m_nQryType;
        }

        inline int32 get_pageId() const
        {
            return m_iPageId;
        }

        inline int32 get_pageSize() const
        {
            return m_iPageSize;
        }

        inline int64 get_totalCount() const
        {
            return m_llTotalCount;
        }

        inline int16 get_sortFlag() const
        {
            return m_nSortFlag;
        }

        inline AISTD string get_sortAlias() const
        {
            return m_strSortAlias;
        }

        inline AISTD string get_notes() const
        {
            return m_strNotes;
        }

    public:
        inline void set_qryType(const int16& value)
        {
            m_nQryType = value;
            m_llMarker |= BIT_QRY_TYPE;
            m_llUsedMarker |= BIT_QRY_TYPE;
        }

        inline void set_pageId(const int32& value)
        {
            m_iPageId = value;
            m_llMarker |= BIT_PAGE_ID;
            m_llUsedMarker |= BIT_PAGE_ID;
        }

        inline void set_pageSize(const int32& value)
        {
            m_iPageSize = value;
            m_llMarker |= BIT_PAGE_SIZE;
            m_llUsedMarker |= BIT_PAGE_SIZE;
        }

        inline void set_totalCount(const int64& value)
        {
            m_llTotalCount = value;
            m_llMarker |= BIT_TOTAL_COUNT;
            m_llUsedMarker |= BIT_TOTAL_COUNT;
        }

        inline void set_sortFlag(const int16& value)
        {
            m_nSortFlag = value;
            m_llMarker |= BIT_SORT_FLAG;
            m_llUsedMarker |= BIT_SORT_FLAG;
        }

        inline void set_sortAlias(const AISTD string& value)
        {
            m_strSortAlias = value;
            m_llMarker |= BIT_SORT_ALIAS;
            m_llUsedMarker |= BIT_SORT_ALIAS;
        }

        inline void set_notes(const AISTD string& value)
        {
            m_strNotes = value;
            m_llMarker |= BIT_NOTES;
            m_llUsedMarker |= BIT_NOTES;
        }

    private: // data members
        int16		m_nQryType;
        int32		m_iPageId;
        int32		m_iPageSize;
        int64		m_llTotalCount;
        int16		m_nSortFlag;
        AISTD string		m_strSortAlias;
        AISTD string		m_strNotes;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWDEFINE
    class CFmFlowDefine : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_FLOW_ID,
            IDX_FLOW_NAME,
            IDX_FLOW_DESC,
            IDX_RELEASE_STATUS,
            IDX_USE_TYPE,
            IDX_COMM_PARA,
            IDX_WEB_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_REMARK,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_FLOW_ID		= 0x1,
            BIT_FLOW_NAME		= 0x2,
            BIT_FLOW_DESC		= 0x4,
            BIT_RELEASE_STATUS		= 0x8,
            BIT_USE_TYPE		= 0x10,
            BIT_COMM_PARA		= 0x20,
            BIT_WEB_PARA		= 0x40,
            BIT_VALID_DATE		= 0x80,
            BIT_EXPIRE_DATE		= 0x100,
            BIT_DONE_CODE		= 0x200,
            BIT_REMARK		= 0x400,
            BIT_DONE_DATE		= 0x800,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmFlowDefine();
        CFmFlowDefine(const CFmFlowDefine& rhs);
        ~CFmFlowDefine();
        CFmFlowDefine& operator=(const CFmFlowDefine& rhs);
        bool operator==(const CFmFlowDefine& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline AISTD string get_flowName() const
        {
            return m_strFlowName;
        }

        inline AISTD string get_flowDesc() const
        {
            return m_strFlowDesc;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline int16 get_useType() const
        {
            return m_nUseType;
        }

        inline AISTD string get_commPara() const
        {
            return m_strCommPara;
        }

        inline AISTD string get_webPara() const
        {
            return m_strWebPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_flowName(const AISTD string& value)
        {
            m_strFlowName = value;
            m_llMarker |= BIT_FLOW_NAME;
            m_llUsedMarker |= BIT_FLOW_NAME;
        }

        inline void set_flowDesc(const AISTD string& value)
        {
            m_strFlowDesc = value;
            m_llMarker |= BIT_FLOW_DESC;
            m_llUsedMarker |= BIT_FLOW_DESC;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_useType(const int16& value)
        {
            m_nUseType = value;
            m_llMarker |= BIT_USE_TYPE;
            m_llUsedMarker |= BIT_USE_TYPE;
        }

        inline void set_commPara(const AISTD string& value)
        {
            m_strCommPara = value;
            m_llMarker |= BIT_COMM_PARA;
            m_llUsedMarker |= BIT_COMM_PARA;
        }

        inline void set_webPara(const AISTD string& value)
        {
            m_strWebPara = value;
            m_llMarker |= BIT_WEB_PARA;
            m_llUsedMarker |= BIT_WEB_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int32		m_iFlowId;
        AISTD string		m_strFlowName;
        AISTD string		m_strFlowDesc;
        int16		m_nReleaseStatus;
        int16		m_nUseType;
        AISTD string		m_strCommPara;
        AISTD string		m_strWebPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        AISTD string		m_strRemark;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWDEFINELIST
    // list definition for CFmFlowDefineList
    class CFmFlowDefineList : public CObdBasicListObject, public AISTD vector<CFmFlowDefine>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWNODEINFO
    class CFmFlowNodeInfo : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_FLOW_ID,
            IDX_INST_ID,
            IDX_INST_NAME,
            IDX_NODE_ID,
            IDX_WEB_PARA,
            IDX_NODE_TYPE,
            IDX_RELEASE_STATUS,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_RELID,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_FLOW_ID		= 0x1,
            BIT_INST_ID		= 0x2,
            BIT_INST_NAME		= 0x4,
            BIT_NODE_ID		= 0x8,
            BIT_WEB_PARA		= 0x10,
            BIT_NODE_TYPE		= 0x20,
            BIT_RELEASE_STATUS		= 0x40,
            BIT_VALID_DATE		= 0x80,
            BIT_EXPIRE_DATE		= 0x100,
            BIT_DONE_CODE		= 0x200,
            BIT_RELID		= 0x400,
            BIT_DONE_DATE		= 0x800,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmFlowNodeInfo();
        CFmFlowNodeInfo(const CFmFlowNodeInfo& rhs);
        ~CFmFlowNodeInfo();
        CFmFlowNodeInfo& operator=(const CFmFlowNodeInfo& rhs);
        bool operator==(const CFmFlowNodeInfo& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline AISTD string get_instName() const
        {
            return m_strInstName;
        }

        inline int32 get_nodeId() const
        {
            return m_iNodeId;
        }

        inline AISTD string get_webPara() const
        {
            return m_strWebPara;
        }

        inline AISTD string get_nodeType() const
        {
            return m_strNodeType;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline int32 get_relid() const
        {
            return m_iRelid;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_instName(const AISTD string& value)
        {
            m_strInstName = value;
            m_llMarker |= BIT_INST_NAME;
            m_llUsedMarker |= BIT_INST_NAME;
        }

        inline void set_nodeId(const int32& value)
        {
            m_iNodeId = value;
            m_llMarker |= BIT_NODE_ID;
            m_llUsedMarker |= BIT_NODE_ID;
        }

        inline void set_webPara(const AISTD string& value)
        {
            m_strWebPara = value;
            m_llMarker |= BIT_WEB_PARA;
            m_llUsedMarker |= BIT_WEB_PARA;
        }

        inline void set_nodeType(const AISTD string& value)
        {
            m_strNodeType = value;
            m_llMarker |= BIT_NODE_TYPE;
            m_llUsedMarker |= BIT_NODE_TYPE;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_relid(const int32& value)
        {
            m_iRelid = value;
            m_llMarker |= BIT_RELID;
            m_llUsedMarker |= BIT_RELID;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int32		m_iFlowId;
        int32		m_iInstId;
        AISTD string		m_strInstName;
        int32		m_iNodeId;
        AISTD string		m_strWebPara;
        AISTD string		m_strNodeType;
        int16		m_nReleaseStatus;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        int32		m_iRelid;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWNODEINFOLIST
    // list definition for CFmFlowNodeInfoList
    class CFmFlowNodeInfoList : public CObdBasicListObject, public AISTD vector<CFmFlowNodeInfo>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWNODEPARAM
    class CFmFlowNodeParam : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_FLOW_ID,
            IDX_INST_ID,
            IDX_RELEASE_STATUS,
            IDX_PARA_SYMBOL,
            IDX_PARA_VALUE,
            IDX_LINK_INST_ID,
            IDX_LINK_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_FLOW_ID		= 0x1,
            BIT_INST_ID		= 0x2,
            BIT_RELEASE_STATUS		= 0x4,
            BIT_PARA_SYMBOL		= 0x8,
            BIT_PARA_VALUE		= 0x10,
            BIT_LINK_INST_ID		= 0x20,
            BIT_LINK_PARA		= 0x40,
            BIT_VALID_DATE		= 0x80,
            BIT_EXPIRE_DATE		= 0x100,
            BIT_DONE_CODE		= 0x200,
            BIT_DONE_DATE		= 0x400,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmFlowNodeParam();
        CFmFlowNodeParam(const CFmFlowNodeParam& rhs);
        ~CFmFlowNodeParam();
        CFmFlowNodeParam& operator=(const CFmFlowNodeParam& rhs);
        bool operator==(const CFmFlowNodeParam& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline AISTD string get_paraSymbol() const
        {
            return m_strParaSymbol;
        }

        inline AISTD string get_paraValue() const
        {
            return m_strParaValue;
        }

        inline int32 get_linkInstId() const
        {
            return m_iLinkInstId;
        }

        inline AISTD string get_linkPara() const
        {
            return m_strLinkPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_paraSymbol(const AISTD string& value)
        {
            m_strParaSymbol = value;
            m_llMarker |= BIT_PARA_SYMBOL;
            m_llUsedMarker |= BIT_PARA_SYMBOL;
        }

        inline void set_paraValue(const AISTD string& value)
        {
            m_strParaValue = value;
            m_llMarker |= BIT_PARA_VALUE;
            m_llUsedMarker |= BIT_PARA_VALUE;
        }

        inline void set_linkInstId(const int32& value)
        {
            m_iLinkInstId = value;
            m_llMarker |= BIT_LINK_INST_ID;
            m_llUsedMarker |= BIT_LINK_INST_ID;
        }

        inline void set_linkPara(const AISTD string& value)
        {
            m_strLinkPara = value;
            m_llMarker |= BIT_LINK_PARA;
            m_llUsedMarker |= BIT_LINK_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int32		m_iFlowId;
        int32		m_iInstId;
        int16		m_nReleaseStatus;
        AISTD string		m_strParaSymbol;
        AISTD string		m_strParaValue;
        int32		m_iLinkInstId;
        AISTD string		m_strLinkPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWNODEPARAMLIST
    // list definition for CFmFlowNodeParamList
    class CFmFlowNodeParamList : public CObdBasicListObject, public AISTD vector<CFmFlowNodeParam>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWNODERELATION
    class CFmFlowNodeRelation : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_FLOW_ID,
            IDX_INST_ID,
            IDX_CHILD_INST_ID,
            IDX_RELEASE_STATUS,
            IDX_COND_EXPR,
            IDX_WEB_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_FLOW_ID		= 0x1,
            BIT_INST_ID		= 0x2,
            BIT_CHILD_INST_ID		= 0x4,
            BIT_RELEASE_STATUS		= 0x8,
            BIT_COND_EXPR		= 0x10,
            BIT_WEB_PARA		= 0x20,
            BIT_VALID_DATE		= 0x40,
            BIT_EXPIRE_DATE		= 0x80,
            BIT_DONE_CODE		= 0x100,
            BIT_DONE_DATE		= 0x200,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmFlowNodeRelation();
        CFmFlowNodeRelation(const CFmFlowNodeRelation& rhs);
        ~CFmFlowNodeRelation();
        CFmFlowNodeRelation& operator=(const CFmFlowNodeRelation& rhs);
        bool operator==(const CFmFlowNodeRelation& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline int32 get_childInstId() const
        {
            return m_iChildInstId;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline AISTD string get_condExpr() const
        {
            return m_strCondExpr;
        }

        inline AISTD string get_webPara() const
        {
            return m_strWebPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_childInstId(const int32& value)
        {
            m_iChildInstId = value;
            m_llMarker |= BIT_CHILD_INST_ID;
            m_llUsedMarker |= BIT_CHILD_INST_ID;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_condExpr(const AISTD string& value)
        {
            m_strCondExpr = value;
            m_llMarker |= BIT_COND_EXPR;
            m_llUsedMarker |= BIT_COND_EXPR;
        }

        inline void set_webPara(const AISTD string& value)
        {
            m_strWebPara = value;
            m_llMarker |= BIT_WEB_PARA;
            m_llUsedMarker |= BIT_WEB_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int32		m_iFlowId;
        int32		m_iInstId;
        int32		m_iChildInstId;
        int16		m_nReleaseStatus;
        AISTD string		m_strCondExpr;
        AISTD string		m_strWebPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMFLOWNODERELATIONLIST
    // list definition for CFmFlowNodeRelationList
    class CFmFlowNodeRelationList : public CObdBasicListObject, public AISTD vector<CFmFlowNodeRelation>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMNODEDEFINE
    class CFmNodeDefine : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_NODE_ID,
            IDX_NODE_NAME,
            IDX_NODE_DESC,
            IDX_BASE_TYPE,
            IDX_INDIRECT_PRE_NODE,
            IDX_DIRECT_PRE_NODE,
            IDX_WEB_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_REMARK,
            IDX_SCRIPT_ID,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_NODE_ID		= 0x1,
            BIT_NODE_NAME		= 0x2,
            BIT_NODE_DESC		= 0x4,
            BIT_BASE_TYPE		= 0x8,
            BIT_INDIRECT_PRE_NODE		= 0x10,
            BIT_DIRECT_PRE_NODE		= 0x20,
            BIT_WEB_PARA		= 0x40,
            BIT_VALID_DATE		= 0x80,
            BIT_EXPIRE_DATE		= 0x100,
            BIT_DONE_CODE		= 0x200,
            BIT_REMARK		= 0x400,
            BIT_SCRIPT_ID		= 0x800,
            BIT_DONE_DATE		= 0x1000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmNodeDefine();
        CFmNodeDefine(const CFmNodeDefine& rhs);
        ~CFmNodeDefine();
        CFmNodeDefine& operator=(const CFmNodeDefine& rhs);
        bool operator==(const CFmNodeDefine& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_nodeId() const
        {
            return m_iNodeId;
        }

        inline AISTD string get_nodeName() const
        {
            return m_strNodeName;
        }

        inline AISTD string get_nodeDesc() const
        {
            return m_strNodeDesc;
        }

        inline int16 get_baseType() const
        {
            return m_nBaseType;
        }

        inline AISTD string get_indirectPreNode() const
        {
            return m_strIndirectPreNode;
        }

        inline AISTD string get_directPreNode() const
        {
            return m_strDirectPreNode;
        }

        inline AISTD string get_webPara() const
        {
            return m_strWebPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

        inline AISTD string get_scriptId() const
        {
            return m_strScriptId;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_nodeId(const int32& value)
        {
            m_iNodeId = value;
            m_llMarker |= BIT_NODE_ID;
            m_llUsedMarker |= BIT_NODE_ID;
        }

        inline void set_nodeName(const AISTD string& value)
        {
            m_strNodeName = value;
            m_llMarker |= BIT_NODE_NAME;
            m_llUsedMarker |= BIT_NODE_NAME;
        }

        inline void set_nodeDesc(const AISTD string& value)
        {
            m_strNodeDesc = value;
            m_llMarker |= BIT_NODE_DESC;
            m_llUsedMarker |= BIT_NODE_DESC;
        }

        inline void set_baseType(const int16& value)
        {
            m_nBaseType = value;
            m_llMarker |= BIT_BASE_TYPE;
            m_llUsedMarker |= BIT_BASE_TYPE;
        }

        inline void set_indirectPreNode(const AISTD string& value)
        {
            m_strIndirectPreNode = value;
            m_llMarker |= BIT_INDIRECT_PRE_NODE;
            m_llUsedMarker |= BIT_INDIRECT_PRE_NODE;
        }

        inline void set_directPreNode(const AISTD string& value)
        {
            m_strDirectPreNode = value;
            m_llMarker |= BIT_DIRECT_PRE_NODE;
            m_llUsedMarker |= BIT_DIRECT_PRE_NODE;
        }

        inline void set_webPara(const AISTD string& value)
        {
            m_strWebPara = value;
            m_llMarker |= BIT_WEB_PARA;
            m_llUsedMarker |= BIT_WEB_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

        inline void set_scriptId(const AISTD string& value)
        {
            m_strScriptId = value;
            m_llMarker |= BIT_SCRIPT_ID;
            m_llUsedMarker |= BIT_SCRIPT_ID;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int32		m_iNodeId;
        AISTD string		m_strNodeName;
        AISTD string		m_strNodeDesc;
        int16		m_nBaseType;
        AISTD string		m_strIndirectPreNode;
        AISTD string		m_strDirectPreNode;
        AISTD string		m_strWebPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        AISTD string		m_strRemark;
        AISTD string		m_strScriptId;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMNODEDEFINELIST
    // list definition for CFmNodeDefineList
    class CFmNodeDefineList : public CObdBasicListObject, public AISTD vector<CFmNodeDefine>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMNODEPARAMDEFINE
    class CFmNodeParamDefine : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_NODE_ID,
            IDX_PARA_NAME,
            IDX_PARA_SYMBOL,
            IDX_PARA_TYPE,
            IDX_WEB_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_NODE_ID		= 0x1,
            BIT_PARA_NAME		= 0x2,
            BIT_PARA_SYMBOL		= 0x4,
            BIT_PARA_TYPE		= 0x8,
            BIT_WEB_PARA		= 0x10,
            BIT_VALID_DATE		= 0x20,
            BIT_EXPIRE_DATE		= 0x40,
            BIT_DONE_CODE		= 0x80,
            BIT_DONE_DATE		= 0x100,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmNodeParamDefine();
        CFmNodeParamDefine(const CFmNodeParamDefine& rhs);
        ~CFmNodeParamDefine();
        CFmNodeParamDefine& operator=(const CFmNodeParamDefine& rhs);
        bool operator==(const CFmNodeParamDefine& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_nodeId() const
        {
            return m_iNodeId;
        }

        inline AISTD string get_paraName() const
        {
            return m_strParaName;
        }

        inline AISTD string get_paraSymbol() const
        {
            return m_strParaSymbol;
        }

        inline int16 get_paraType() const
        {
            return m_nParaType;
        }

        inline AISTD string get_webPara() const
        {
            return m_strWebPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_nodeId(const int32& value)
        {
            m_iNodeId = value;
            m_llMarker |= BIT_NODE_ID;
            m_llUsedMarker |= BIT_NODE_ID;
        }

        inline void set_paraName(const AISTD string& value)
        {
            m_strParaName = value;
            m_llMarker |= BIT_PARA_NAME;
            m_llUsedMarker |= BIT_PARA_NAME;
        }

        inline void set_paraSymbol(const AISTD string& value)
        {
            m_strParaSymbol = value;
            m_llMarker |= BIT_PARA_SYMBOL;
            m_llUsedMarker |= BIT_PARA_SYMBOL;
        }

        inline void set_paraType(const int16& value)
        {
            m_nParaType = value;
            m_llMarker |= BIT_PARA_TYPE;
            m_llUsedMarker |= BIT_PARA_TYPE;
        }

        inline void set_webPara(const AISTD string& value)
        {
            m_strWebPara = value;
            m_llMarker |= BIT_WEB_PARA;
            m_llUsedMarker |= BIT_WEB_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int32		m_iNodeId;
        AISTD string		m_strParaName;
        AISTD string		m_strParaSymbol;
        int16		m_nParaType;
        AISTD string		m_strWebPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMNODEPARAMDEFINELIST
    // list definition for CFmNodeParamDefineList
    class CFmNodeParamDefineList : public CObdBasicListObject, public AISTD vector<CFmNodeParamDefine>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMPLAN
    class CFmPlan : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_PLAN_ID,
            IDX_PLAN_NAME,
            IDX_PLAN_DESC,
            IDX_FLOW_ID,
            IDX_USE_TYPE,
            IDX_CYCLE_TYPE,
            IDX_CYCLE_PARAM,
            IDX_NEXT_RUN_DATE,
            IDX_RUN_NUMS,
            IDX_BEGIN_DATE,
            IDX_END_DATE,
            IDX_RUN_STS,
            IDX_FIRST_TASK_TIME,
            IDX_LAST_TASK_TIME,
            IDX_RELEASE_STATUS,
            IDX_COMM_PARA,
            IDX_OP_ID,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_REMARK,
            IDX_GROUP_ID,
            IDX_SORT_ID,
            IDX_DONE_DATE,
            IDX_CREATE_DATE,
            IDX_LAST_TASK_STS,
            IDX_FAIL_NUMS,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_PLAN_ID		= 0x1,
            BIT_PLAN_NAME		= 0x2,
            BIT_PLAN_DESC		= 0x4,
            BIT_FLOW_ID		= 0x8,
            BIT_USE_TYPE		= 0x10,
            BIT_CYCLE_TYPE		= 0x20,
            BIT_CYCLE_PARAM		= 0x40,
            BIT_NEXT_RUN_DATE		= 0x80,
            BIT_RUN_NUMS		= 0x100,
            BIT_BEGIN_DATE		= 0x200,
            BIT_END_DATE		= 0x400,
            BIT_RUN_STS		= 0x800,
            BIT_FIRST_TASK_TIME		= 0x1000,
            BIT_LAST_TASK_TIME		= 0x2000,
            BIT_RELEASE_STATUS		= 0x4000,
            BIT_COMM_PARA		= 0x8000,
            BIT_OP_ID		= 0x10000,
            BIT_VALID_DATE		= 0x20000,
            BIT_EXPIRE_DATE		= 0x40000,
            BIT_DONE_CODE		= 0x80000,
            BIT_REMARK		= 0x100000,
            BIT_GROUP_ID		= 0x200000,
            BIT_SORT_ID		= 0x400000,
            BIT_DONE_DATE		= 0x800000,
            BIT_CREATE_DATE		= 0x1000000,
            BIT_LAST_TASK_STS		= 0x2000000,
            BIT_FAIL_NUMS		= 0x4000000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmPlan();
        CFmPlan(const CFmPlan& rhs);
        ~CFmPlan();
        CFmPlan& operator=(const CFmPlan& rhs);
        bool operator==(const CFmPlan& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_planId() const
        {
            return m_llPlanId;
        }

        inline AISTD string get_planName() const
        {
            return m_strPlanName;
        }

        inline AISTD string get_planDesc() const
        {
            return m_strPlanDesc;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int16 get_useType() const
        {
            return m_nUseType;
        }

        inline int16 get_cycleType() const
        {
            return m_nCycleType;
        }

        inline AISTD string get_cycleParam() const
        {
            return m_strCycleParam;
        }

        inline CBSDateTime get_nextRunDate() const
        {
            return m_dtmNextRunDate;
        }

        inline int32 get_runNums() const
        {
            return m_iRunNums;
        }

        inline CBSDateTime get_beginDate() const
        {
            return m_dtmBeginDate;
        }

        inline CBSDateTime get_endDate() const
        {
            return m_dtmEndDate;
        }

        inline int16 get_runSts() const
        {
            return m_nRunSts;
        }

        inline CBSDateTime get_firstTaskTime() const
        {
            return m_dtmFirstTaskTime;
        }

        inline CBSDateTime get_lastTaskTime() const
        {
            return m_dtmLastTaskTime;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline AISTD string get_commPara() const
        {
            return m_strCommPara;
        }

        inline int32 get_opId() const
        {
            return m_iOpId;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

        inline int32 get_groupId() const
        {
            return m_iGroupId;
        }

        inline int32 get_sortId() const
        {
            return m_iSortId;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

        inline CBSDateTime get_createDate() const
        {
            return m_dtmCreateDate;
        }

        inline int16 get_lastTaskSts() const
        {
            return m_nLastTaskSts;
        }

        inline int32 get_failNums() const
        {
            return m_iFailNums;
        }

    public:
        inline void set_planId(const int64& value)
        {
            m_llPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_planName(const AISTD string& value)
        {
            m_strPlanName = value;
            m_llMarker |= BIT_PLAN_NAME;
            m_llUsedMarker |= BIT_PLAN_NAME;
        }

        inline void set_planDesc(const AISTD string& value)
        {
            m_strPlanDesc = value;
            m_llMarker |= BIT_PLAN_DESC;
            m_llUsedMarker |= BIT_PLAN_DESC;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_useType(const int16& value)
        {
            m_nUseType = value;
            m_llMarker |= BIT_USE_TYPE;
            m_llUsedMarker |= BIT_USE_TYPE;
        }

        inline void set_cycleType(const int16& value)
        {
            m_nCycleType = value;
            m_llMarker |= BIT_CYCLE_TYPE;
            m_llUsedMarker |= BIT_CYCLE_TYPE;
        }

        inline void set_cycleParam(const AISTD string& value)
        {
            m_strCycleParam = value;
            m_llMarker |= BIT_CYCLE_PARAM;
            m_llUsedMarker |= BIT_CYCLE_PARAM;
        }

        inline void set_nextRunDate(const CBSDateTime& value)
        {
            m_dtmNextRunDate = value;
            m_llMarker |= BIT_NEXT_RUN_DATE;
            m_llUsedMarker |= BIT_NEXT_RUN_DATE;
        }

        inline void set_runNums(const int32& value)
        {
            m_iRunNums = value;
            m_llMarker |= BIT_RUN_NUMS;
            m_llUsedMarker |= BIT_RUN_NUMS;
        }

        inline void set_beginDate(const CBSDateTime& value)
        {
            m_dtmBeginDate = value;
            m_llMarker |= BIT_BEGIN_DATE;
            m_llUsedMarker |= BIT_BEGIN_DATE;
        }

        inline void set_endDate(const CBSDateTime& value)
        {
            m_dtmEndDate = value;
            m_llMarker |= BIT_END_DATE;
            m_llUsedMarker |= BIT_END_DATE;
        }

        inline void set_runSts(const int16& value)
        {
            m_nRunSts = value;
            m_llMarker |= BIT_RUN_STS;
            m_llUsedMarker |= BIT_RUN_STS;
        }

        inline void set_firstTaskTime(const CBSDateTime& value)
        {
            m_dtmFirstTaskTime = value;
            m_llMarker |= BIT_FIRST_TASK_TIME;
            m_llUsedMarker |= BIT_FIRST_TASK_TIME;
        }

        inline void set_lastTaskTime(const CBSDateTime& value)
        {
            m_dtmLastTaskTime = value;
            m_llMarker |= BIT_LAST_TASK_TIME;
            m_llUsedMarker |= BIT_LAST_TASK_TIME;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_commPara(const AISTD string& value)
        {
            m_strCommPara = value;
            m_llMarker |= BIT_COMM_PARA;
            m_llUsedMarker |= BIT_COMM_PARA;
        }

        inline void set_opId(const int32& value)
        {
            m_iOpId = value;
            m_llMarker |= BIT_OP_ID;
            m_llUsedMarker |= BIT_OP_ID;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

        inline void set_groupId(const int32& value)
        {
            m_iGroupId = value;
            m_llMarker |= BIT_GROUP_ID;
            m_llUsedMarker |= BIT_GROUP_ID;
        }

        inline void set_sortId(const int32& value)
        {
            m_iSortId = value;
            m_llMarker |= BIT_SORT_ID;
            m_llUsedMarker |= BIT_SORT_ID;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

        inline void set_createDate(const CBSDateTime& value)
        {
            m_dtmCreateDate = value;
            m_llMarker |= BIT_CREATE_DATE;
            m_llUsedMarker |= BIT_CREATE_DATE;
        }

        inline void set_lastTaskSts(const int16& value)
        {
            m_nLastTaskSts = value;
            m_llMarker |= BIT_LAST_TASK_STS;
            m_llUsedMarker |= BIT_LAST_TASK_STS;
        }

        inline void set_failNums(const int32& value)
        {
            m_iFailNums = value;
            m_llMarker |= BIT_FAIL_NUMS;
            m_llUsedMarker |= BIT_FAIL_NUMS;
        }

    private: // data members
        int64		m_llPlanId;
        AISTD string		m_strPlanName;
        AISTD string		m_strPlanDesc;
        int32		m_iFlowId;
        int16		m_nUseType;
        int16		m_nCycleType;
        AISTD string		m_strCycleParam;
        CBSDateTime		m_dtmNextRunDate;
        int32		m_iRunNums;
        CBSDateTime		m_dtmBeginDate;
        CBSDateTime		m_dtmEndDate;
        int16		m_nRunSts;
        CBSDateTime		m_dtmFirstTaskTime;
        CBSDateTime		m_dtmLastTaskTime;
        int16		m_nReleaseStatus;
        AISTD string		m_strCommPara;
        int32		m_iOpId;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        AISTD string		m_strRemark;
        int32		m_iGroupId;
        int32		m_iSortId;
        CBSDateTime		m_dtmDoneDate;
        CBSDateTime		m_dtmCreateDate;
        int16		m_nLastTaskSts;
        int32		m_iFailNums;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMPLANLIST
    // list definition for CFmPlanList
    class CFmPlanList : public CObdBasicListObject, public AISTD vector<CFmPlan>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMPLANPARAM
    class CFmPlanParam : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_PLAN_ID,
            IDX_FLOW_ID,
            IDX_INST_ID,
            IDX_PARA_SYMBOL,
            IDX_PARA_VALUE,
            IDX_LINK_INST_ID,
            IDX_LINK_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_DONE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_PLAN_ID		= 0x1,
            BIT_FLOW_ID		= 0x2,
            BIT_INST_ID		= 0x4,
            BIT_PARA_SYMBOL		= 0x8,
            BIT_PARA_VALUE		= 0x10,
            BIT_LINK_INST_ID		= 0x20,
            BIT_LINK_PARA		= 0x40,
            BIT_VALID_DATE		= 0x80,
            BIT_EXPIRE_DATE		= 0x100,
            BIT_DONE_CODE		= 0x200,
            BIT_DONE_DATE		= 0x400,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmPlanParam();
        CFmPlanParam(const CFmPlanParam& rhs);
        ~CFmPlanParam();
        CFmPlanParam& operator=(const CFmPlanParam& rhs);
        bool operator==(const CFmPlanParam& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_planId() const
        {
            return m_llPlanId;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline AISTD string get_paraSymbol() const
        {
            return m_strParaSymbol;
        }

        inline AISTD string get_paraValue() const
        {
            return m_strParaValue;
        }

        inline int32 get_linkInstId() const
        {
            return m_iLinkInstId;
        }

        inline AISTD string get_linkPara() const
        {
            return m_strLinkPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

    public:
        inline void set_planId(const int64& value)
        {
            m_llPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_paraSymbol(const AISTD string& value)
        {
            m_strParaSymbol = value;
            m_llMarker |= BIT_PARA_SYMBOL;
            m_llUsedMarker |= BIT_PARA_SYMBOL;
        }

        inline void set_paraValue(const AISTD string& value)
        {
            m_strParaValue = value;
            m_llMarker |= BIT_PARA_VALUE;
            m_llUsedMarker |= BIT_PARA_VALUE;
        }

        inline void set_linkInstId(const int32& value)
        {
            m_iLinkInstId = value;
            m_llMarker |= BIT_LINK_INST_ID;
            m_llUsedMarker |= BIT_LINK_INST_ID;
        }

        inline void set_linkPara(const AISTD string& value)
        {
            m_strLinkPara = value;
            m_llMarker |= BIT_LINK_PARA;
            m_llUsedMarker |= BIT_LINK_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

    private: // data members
        int64		m_llPlanId;
        int32		m_iFlowId;
        int32		m_iInstId;
        AISTD string		m_strParaSymbol;
        AISTD string		m_strParaValue;
        int32		m_iLinkInstId;
        AISTD string		m_strLinkPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        CBSDateTime		m_dtmDoneDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMPLANPARAMLIST
    // list definition for CFmPlanParamList
    class CFmPlanParamList : public CObdBasicListObject, public AISTD vector<CFmPlanParam>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASK
    class CFmTask : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_TASK_ID,
            IDX_TASK_NAME,
            IDX_SUBTASK_ID,
            IDX_EXT_TASK_ID,
            IDX_PLAN_ID,
            IDX_FLOW_ID,
            IDX_TASK_DATE,
            IDX_BEGIN_DATE,
            IDX_END_DATE,
            IDX_STS,
            IDX_RUN_MSG,
            IDX_REGION_CODE,
            IDX_BUSI_ID,
            IDX_XML,
            IDX_RELEASE_STATUS,
            IDX_USE_TYPE,
            IDX_PLAN_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_TASK_ID		= 0x1,
            BIT_TASK_NAME		= 0x2,
            BIT_SUBTASK_ID		= 0x4,
            BIT_EXT_TASK_ID		= 0x8,
            BIT_PLAN_ID		= 0x10,
            BIT_FLOW_ID		= 0x20,
            BIT_TASK_DATE		= 0x40,
            BIT_BEGIN_DATE		= 0x80,
            BIT_END_DATE		= 0x100,
            BIT_STS		= 0x200,
            BIT_RUN_MSG		= 0x400,
            BIT_REGION_CODE		= 0x800,
            BIT_BUSI_ID		= 0x1000,
            BIT_XML		= 0x2000,
            BIT_RELEASE_STATUS		= 0x4000,
            BIT_USE_TYPE		= 0x8000,
            BIT_PLAN_DATE		= 0x10000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmTask();
        CFmTask(const CFmTask& rhs);
        ~CFmTask();
        CFmTask& operator=(const CFmTask& rhs);
        bool operator==(const CFmTask& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_taskId() const
        {
            return m_llTaskId;
        }

        inline AISTD string get_taskName() const
        {
            return m_strTaskName;
        }

        inline int64 get_subtaskId() const
        {
            return m_llSubtaskId;
        }

        inline int64 get_extTaskId() const
        {
            return m_llExtTaskId;
        }

        inline int64 get_planId() const
        {
            return m_llPlanId;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline CBSDateTime get_taskDate() const
        {
            return m_dtmTaskDate;
        }

        inline CBSDateTime get_beginDate() const
        {
            return m_dtmBeginDate;
        }

        inline CBSDateTime get_endDate() const
        {
            return m_dtmEndDate;
        }

        inline int16 get_sts() const
        {
            return m_nSts;
        }

        inline AISTD string get_runMsg() const
        {
            return m_strRunMsg;
        }

        inline AISTD string get_regionCode() const
        {
            return m_strRegionCode;
        }

        inline int32 get_busiId() const
        {
            return m_iBusiId;
        }

        inline AISTD string get_xml() const
        {
            return m_strXml;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline int16 get_useType() const
        {
            return m_nUseType;
        }

        inline CBSDateTime get_planDate() const
        {
            return m_dtmPlanDate;
        }

    public:
        inline void set_taskId(const int64& value)
        {
            m_llTaskId = value;
            m_llMarker |= BIT_TASK_ID;
            m_llUsedMarker |= BIT_TASK_ID;
        }

        inline void set_taskName(const AISTD string& value)
        {
            m_strTaskName = value;
            m_llMarker |= BIT_TASK_NAME;
            m_llUsedMarker |= BIT_TASK_NAME;
        }

        inline void set_subtaskId(const int64& value)
        {
            m_llSubtaskId = value;
            m_llMarker |= BIT_SUBTASK_ID;
            m_llUsedMarker |= BIT_SUBTASK_ID;
        }

        inline void set_extTaskId(const int64& value)
        {
            m_llExtTaskId = value;
            m_llMarker |= BIT_EXT_TASK_ID;
            m_llUsedMarker |= BIT_EXT_TASK_ID;
        }

        inline void set_planId(const int64& value)
        {
            m_llPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_taskDate(const CBSDateTime& value)
        {
            m_dtmTaskDate = value;
            m_llMarker |= BIT_TASK_DATE;
            m_llUsedMarker |= BIT_TASK_DATE;
        }

        inline void set_beginDate(const CBSDateTime& value)
        {
            m_dtmBeginDate = value;
            m_llMarker |= BIT_BEGIN_DATE;
            m_llUsedMarker |= BIT_BEGIN_DATE;
        }

        inline void set_endDate(const CBSDateTime& value)
        {
            m_dtmEndDate = value;
            m_llMarker |= BIT_END_DATE;
            m_llUsedMarker |= BIT_END_DATE;
        }

        inline void set_sts(const int16& value)
        {
            m_nSts = value;
            m_llMarker |= BIT_STS;
            m_llUsedMarker |= BIT_STS;
        }

        inline void set_runMsg(const AISTD string& value)
        {
            m_strRunMsg = value;
            m_llMarker |= BIT_RUN_MSG;
            m_llUsedMarker |= BIT_RUN_MSG;
        }

        inline void set_regionCode(const AISTD string& value)
        {
            m_strRegionCode = value;
            m_llMarker |= BIT_REGION_CODE;
            m_llUsedMarker |= BIT_REGION_CODE;
        }

        inline void set_busiId(const int32& value)
        {
            m_iBusiId = value;
            m_llMarker |= BIT_BUSI_ID;
            m_llUsedMarker |= BIT_BUSI_ID;
        }

        inline void set_xml(const AISTD string& value)
        {
            m_strXml = value;
            m_llMarker |= BIT_XML;
            m_llUsedMarker |= BIT_XML;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_useType(const int16& value)
        {
            m_nUseType = value;
            m_llMarker |= BIT_USE_TYPE;
            m_llUsedMarker |= BIT_USE_TYPE;
        }

        inline void set_planDate(const CBSDateTime& value)
        {
            m_dtmPlanDate = value;
            m_llMarker |= BIT_PLAN_DATE;
            m_llUsedMarker |= BIT_PLAN_DATE;
        }

    private: // data members
        int64		m_llTaskId;
        AISTD string		m_strTaskName;
        int64		m_llSubtaskId;
        int64		m_llExtTaskId;
        int64		m_llPlanId;
        int32		m_iFlowId;
        CBSDateTime		m_dtmTaskDate;
        CBSDateTime		m_dtmBeginDate;
        CBSDateTime		m_dtmEndDate;
        int16		m_nSts;
        AISTD string		m_strRunMsg;
        AISTD string		m_strRegionCode;
        int32		m_iBusiId;
        AISTD string		m_strXml;
        int16		m_nReleaseStatus;
        int16		m_nUseType;
        CBSDateTime		m_dtmPlanDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKLIST
    // list definition for CFmTaskList
    class CFmTaskList : public CObdBasicListObject, public AISTD vector<CFmTask>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKLOG
    class CFmTaskLog : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_SUBTASK_ID,
            IDX_INST_ID,
            IDX_LOG_INFO,
            IDX_INSERT_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_SUBTASK_ID		= 0x1,
            BIT_INST_ID		= 0x2,
            BIT_LOG_INFO		= 0x4,
            BIT_INSERT_DATE		= 0x8,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmTaskLog();
        CFmTaskLog(const CFmTaskLog& rhs);
        ~CFmTaskLog();
        CFmTaskLog& operator=(const CFmTaskLog& rhs);
        bool operator==(const CFmTaskLog& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_subtaskId() const
        {
            return m_llSubtaskId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline AISTD string get_logInfo() const
        {
            return m_strLogInfo;
        }

        inline CBSDateTime get_insertDate() const
        {
            return m_dtmInsertDate;
        }

    public:
        inline void set_subtaskId(const int64& value)
        {
            m_llSubtaskId = value;
            m_llMarker |= BIT_SUBTASK_ID;
            m_llUsedMarker |= BIT_SUBTASK_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_logInfo(const AISTD string& value)
        {
            m_strLogInfo = value;
            m_llMarker |= BIT_LOG_INFO;
            m_llUsedMarker |= BIT_LOG_INFO;
        }

        inline void set_insertDate(const CBSDateTime& value)
        {
            m_dtmInsertDate = value;
            m_llMarker |= BIT_INSERT_DATE;
            m_llUsedMarker |= BIT_INSERT_DATE;
        }

    private: // data members
        int64		m_llSubtaskId;
        int32		m_iInstId;
        AISTD string		m_strLogInfo;
        CBSDateTime		m_dtmInsertDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKLOGLIST
    // list definition for CFmTaskLogList
    class CFmTaskLogList : public CObdBasicListObject, public AISTD vector<CFmTaskLog>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKNODEINFO
    class CFmTaskNodeInfo : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_TASK_ID,
            IDX_SUBTASK_ID,
            IDX_PLAN_ID,
            IDX_INST_ID,
            IDX_STS,
            IDX_STS_MSG,
            IDX_BEGIN_DATE,
            IDX_END_DATE,
            IDX_PARENT_INST_ID,
            IDX_PARENT_INST_ID_SUCCNUM,
            IDX_NODE_TYPE,
            IDX_GROUP_ID,
            IDX_SORT_ID,
            IDX_FLOW_ID,
            IDX_RELEASE_STATUS,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_TASK_ID		= 0x1,
            BIT_SUBTASK_ID		= 0x2,
            BIT_PLAN_ID		= 0x4,
            BIT_INST_ID		= 0x8,
            BIT_STS		= 0x10,
            BIT_STS_MSG		= 0x20,
            BIT_BEGIN_DATE		= 0x40,
            BIT_END_DATE		= 0x80,
            BIT_PARENT_INST_ID		= 0x100,
            BIT_PARENT_INST_ID_SUCCNUM		= 0x200,
            BIT_NODE_TYPE		= 0x400,
            BIT_GROUP_ID		= 0x800,
            BIT_SORT_ID		= 0x1000,
            BIT_FLOW_ID		= 0x2000,
            BIT_RELEASE_STATUS		= 0x4000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmTaskNodeInfo();
        CFmTaskNodeInfo(const CFmTaskNodeInfo& rhs);
        ~CFmTaskNodeInfo();
        CFmTaskNodeInfo& operator=(const CFmTaskNodeInfo& rhs);
        bool operator==(const CFmTaskNodeInfo& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_taskId() const
        {
            return m_llTaskId;
        }

        inline int64 get_subtaskId() const
        {
            return m_llSubtaskId;
        }

        inline int64 get_planId() const
        {
            return m_llPlanId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline int16 get_sts() const
        {
            return m_nSts;
        }

        inline AISTD string get_stsMsg() const
        {
            return m_strStsMsg;
        }

        inline CBSDateTime get_beginDate() const
        {
            return m_dtmBeginDate;
        }

        inline CBSDateTime get_endDate() const
        {
            return m_dtmEndDate;
        }

        inline int32 get_parentInstId() const
        {
            return m_iParentInstId;
        }

        inline int32 get_parentInstIdSuccnum() const
        {
            return m_iParentInstIdSuccnum;
        }

        inline AISTD string get_nodeType() const
        {
            return m_strNodeType;
        }

        inline int32 get_groupId() const
        {
            return m_iGroupId;
        }

        inline int32 get_sortId() const
        {
            return m_iSortId;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

    public:
        inline void set_taskId(const int64& value)
        {
            m_llTaskId = value;
            m_llMarker |= BIT_TASK_ID;
            m_llUsedMarker |= BIT_TASK_ID;
        }

        inline void set_subtaskId(const int64& value)
        {
            m_llSubtaskId = value;
            m_llMarker |= BIT_SUBTASK_ID;
            m_llUsedMarker |= BIT_SUBTASK_ID;
        }

        inline void set_planId(const int64& value)
        {
            m_llPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_sts(const int16& value)
        {
            m_nSts = value;
            m_llMarker |= BIT_STS;
            m_llUsedMarker |= BIT_STS;
        }

        inline void set_stsMsg(const AISTD string& value)
        {
            m_strStsMsg = value;
            m_llMarker |= BIT_STS_MSG;
            m_llUsedMarker |= BIT_STS_MSG;
        }

        inline void set_beginDate(const CBSDateTime& value)
        {
            m_dtmBeginDate = value;
            m_llMarker |= BIT_BEGIN_DATE;
            m_llUsedMarker |= BIT_BEGIN_DATE;
        }

        inline void set_endDate(const CBSDateTime& value)
        {
            m_dtmEndDate = value;
            m_llMarker |= BIT_END_DATE;
            m_llUsedMarker |= BIT_END_DATE;
        }

        inline void set_parentInstId(const int32& value)
        {
            m_iParentInstId = value;
            m_llMarker |= BIT_PARENT_INST_ID;
            m_llUsedMarker |= BIT_PARENT_INST_ID;
        }

        inline void set_parentInstIdSuccnum(const int32& value)
        {
            m_iParentInstIdSuccnum = value;
            m_llMarker |= BIT_PARENT_INST_ID_SUCCNUM;
            m_llUsedMarker |= BIT_PARENT_INST_ID_SUCCNUM;
        }

        inline void set_nodeType(const AISTD string& value)
        {
            m_strNodeType = value;
            m_llMarker |= BIT_NODE_TYPE;
            m_llUsedMarker |= BIT_NODE_TYPE;
        }

        inline void set_groupId(const int32& value)
        {
            m_iGroupId = value;
            m_llMarker |= BIT_GROUP_ID;
            m_llUsedMarker |= BIT_GROUP_ID;
        }

        inline void set_sortId(const int32& value)
        {
            m_iSortId = value;
            m_llMarker |= BIT_SORT_ID;
            m_llUsedMarker |= BIT_SORT_ID;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

    private: // data members
        int64		m_llTaskId;
        int64		m_llSubtaskId;
        int64		m_llPlanId;
        int32		m_iInstId;
        int16		m_nSts;
        AISTD string		m_strStsMsg;
        CBSDateTime		m_dtmBeginDate;
        CBSDateTime		m_dtmEndDate;
        int32		m_iParentInstId;
        int32		m_iParentInstIdSuccnum;
        AISTD string		m_strNodeType;
        int32		m_iGroupId;
        int32		m_iSortId;
        int32		m_iFlowId;
        int16		m_nReleaseStatus;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKNODEINFOLIST
    // list definition for CFmTaskNodeInfoList
    class CFmTaskNodeInfoList : public CObdBasicListObject, public AISTD vector<CFmTaskNodeInfo>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITSYSPARAM
    class CAuditSysParam : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_CODE_TYPE,
            IDX_CODE_GROUP,
            IDX_CODE_ID,
            IDX_CODE_NAME,
            IDX_CODE_VALUE,
            IDX_SORT_ID,
            IDX_IS_USED,
            IDX_CODE_DESC,
            IDX_IS_MODIFY,
            IDX_REGION_CODE,
            IDX_COUNTY_CODE,
            IDX_PARAM_CODE,
            IDX_PARAM_NAME,
            IDX_PARAM_CLASS,
            IDX_PARAM_DATA_TYPE,
            IDX_PARAM_VALUE,
            IDX_PARAM_DESC,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_CODE_TYPE		= 0x1,
            BIT_CODE_GROUP		= 0x2,
            BIT_CODE_ID		= 0x4,
            BIT_CODE_NAME		= 0x8,
            BIT_CODE_VALUE		= 0x10,
            BIT_SORT_ID		= 0x20,
            BIT_IS_USED		= 0x40,
            BIT_CODE_DESC		= 0x80,
            BIT_IS_MODIFY		= 0x100,
            BIT_REGION_CODE		= 0x200,
            BIT_COUNTY_CODE		= 0x400,
            BIT_PARAM_CODE		= 0x800,
            BIT_PARAM_NAME		= 0x1000,
            BIT_PARAM_CLASS		= 0x2000,
            BIT_PARAM_DATA_TYPE		= 0x4000,
            BIT_PARAM_VALUE		= 0x8000,
            BIT_PARAM_DESC		= 0x10000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditSysParam();
        CAuditSysParam(const CAuditSysParam& rhs);
        ~CAuditSysParam();
        CAuditSysParam& operator=(const CAuditSysParam& rhs);
        bool operator==(const CAuditSysParam& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_codeType() const
        {
            return m_iCodeType;
        }

        inline AISTD string get_codeGroup() const
        {
            return m_strCodeGroup;
        }

        inline int32 get_codeId() const
        {
            return m_iCodeId;
        }

        inline AISTD string get_codeName() const
        {
            return m_strCodeName;
        }

        inline AISTD string get_codeValue() const
        {
            return m_strCodeValue;
        }

        inline int32 get_sortId() const
        {
            return m_iSortId;
        }

        inline int16 get_isUsed() const
        {
            return m_nIsUsed;
        }

        inline AISTD string get_codeDesc() const
        {
            return m_strCodeDesc;
        }

        inline int16 get_isModify() const
        {
            return m_nIsModify;
        }

        inline int16 get_regionCode() const
        {
            return m_nRegionCode;
        }

        inline int16 get_countyCode() const
        {
            return m_nCountyCode;
        }

        inline AISTD string get_paramCode() const
        {
            return m_strParamCode;
        }

        inline AISTD string get_paramName() const
        {
            return m_strParamName;
        }

        inline int16 get_paramClass() const
        {
            return m_nParamClass;
        }

        inline AISTD string get_paramDataType() const
        {
            return m_strParamDataType;
        }

        inline AISTD string get_paramValue() const
        {
            return m_strParamValue;
        }

        inline AISTD string get_paramDesc() const
        {
            return m_strParamDesc;
        }

    public:
        inline void set_codeType(const int32& value)
        {
            m_iCodeType = value;
            m_llMarker |= BIT_CODE_TYPE;
            m_llUsedMarker |= BIT_CODE_TYPE;
        }

        inline void set_codeGroup(const AISTD string& value)
        {
            m_strCodeGroup = value;
            m_llMarker |= BIT_CODE_GROUP;
            m_llUsedMarker |= BIT_CODE_GROUP;
        }

        inline void set_codeId(const int32& value)
        {
            m_iCodeId = value;
            m_llMarker |= BIT_CODE_ID;
            m_llUsedMarker |= BIT_CODE_ID;
        }

        inline void set_codeName(const AISTD string& value)
        {
            m_strCodeName = value;
            m_llMarker |= BIT_CODE_NAME;
            m_llUsedMarker |= BIT_CODE_NAME;
        }

        inline void set_codeValue(const AISTD string& value)
        {
            m_strCodeValue = value;
            m_llMarker |= BIT_CODE_VALUE;
            m_llUsedMarker |= BIT_CODE_VALUE;
        }

        inline void set_sortId(const int32& value)
        {
            m_iSortId = value;
            m_llMarker |= BIT_SORT_ID;
            m_llUsedMarker |= BIT_SORT_ID;
        }

        inline void set_isUsed(const int16& value)
        {
            m_nIsUsed = value;
            m_llMarker |= BIT_IS_USED;
            m_llUsedMarker |= BIT_IS_USED;
        }

        inline void set_codeDesc(const AISTD string& value)
        {
            m_strCodeDesc = value;
            m_llMarker |= BIT_CODE_DESC;
            m_llUsedMarker |= BIT_CODE_DESC;
        }

        inline void set_isModify(const int16& value)
        {
            m_nIsModify = value;
            m_llMarker |= BIT_IS_MODIFY;
            m_llUsedMarker |= BIT_IS_MODIFY;
        }

        inline void set_regionCode(const int16& value)
        {
            m_nRegionCode = value;
            m_llMarker |= BIT_REGION_CODE;
            m_llUsedMarker |= BIT_REGION_CODE;
        }

        inline void set_countyCode(const int16& value)
        {
            m_nCountyCode = value;
            m_llMarker |= BIT_COUNTY_CODE;
            m_llUsedMarker |= BIT_COUNTY_CODE;
        }

        inline void set_paramCode(const AISTD string& value)
        {
            m_strParamCode = value;
            m_llMarker |= BIT_PARAM_CODE;
            m_llUsedMarker |= BIT_PARAM_CODE;
        }

        inline void set_paramName(const AISTD string& value)
        {
            m_strParamName = value;
            m_llMarker |= BIT_PARAM_NAME;
            m_llUsedMarker |= BIT_PARAM_NAME;
        }

        inline void set_paramClass(const int16& value)
        {
            m_nParamClass = value;
            m_llMarker |= BIT_PARAM_CLASS;
            m_llUsedMarker |= BIT_PARAM_CLASS;
        }

        inline void set_paramDataType(const AISTD string& value)
        {
            m_strParamDataType = value;
            m_llMarker |= BIT_PARAM_DATA_TYPE;
            m_llUsedMarker |= BIT_PARAM_DATA_TYPE;
        }

        inline void set_paramValue(const AISTD string& value)
        {
            m_strParamValue = value;
            m_llMarker |= BIT_PARAM_VALUE;
            m_llUsedMarker |= BIT_PARAM_VALUE;
        }

        inline void set_paramDesc(const AISTD string& value)
        {
            m_strParamDesc = value;
            m_llMarker |= BIT_PARAM_DESC;
            m_llUsedMarker |= BIT_PARAM_DESC;
        }

    private: // data members
        int32		m_iCodeType;
        AISTD string		m_strCodeGroup;
        int32		m_iCodeId;
        AISTD string		m_strCodeName;
        AISTD string		m_strCodeValue;
        int32		m_iSortId;
        int16		m_nIsUsed;
        AISTD string		m_strCodeDesc;
        int16		m_nIsModify;
        int16		m_nRegionCode;
        int16		m_nCountyCode;
        AISTD string		m_strParamCode;
        AISTD string		m_strParamName;
        int16		m_nParamClass;
        AISTD string		m_strParamDataType;
        AISTD string		m_strParamValue;
        AISTD string		m_strParamDesc;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITSYSPARAMLIST
    // list definition for CAuditSysParamList
    class CAuditSysParamList : public CObdBasicListObject, public AISTD vector<CAuditSysParam>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMSCRIPTDEFINE
    class CFmScriptDefine : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_SCRIPT_ID,
            IDX_NAME,
            IDX_USE_TYPE,
            IDX_CMP_METHOD,
            IDX_SCRIPT_TYPE,
            IDX_LIB_CALL_TYPE,
            IDX_LIB_NAME,
            IDX_LIB_CLASS_NAME,
            IDX_FUNC_NAME,
            IDX_BLOB_ID,
            IDX_SCRIPT,
            IDX_WEB_PARA,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_DONE_DATE,
            IDX_REMARK,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_SCRIPT_ID		= 0x1,
            BIT_NAME		= 0x2,
            BIT_USE_TYPE		= 0x4,
            BIT_CMP_METHOD		= 0x8,
            BIT_SCRIPT_TYPE		= 0x10,
            BIT_LIB_CALL_TYPE		= 0x20,
            BIT_LIB_NAME		= 0x40,
            BIT_LIB_CLASS_NAME		= 0x80,
            BIT_FUNC_NAME		= 0x100,
            BIT_BLOB_ID		= 0x200,
            BIT_SCRIPT		= 0x400,
            BIT_WEB_PARA		= 0x800,
            BIT_VALID_DATE		= 0x1000,
            BIT_EXPIRE_DATE		= 0x2000,
            BIT_DONE_CODE		= 0x4000,
            BIT_DONE_DATE		= 0x8000,
            BIT_REMARK		= 0x10000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmScriptDefine();
        CFmScriptDefine(const CFmScriptDefine& rhs);
        ~CFmScriptDefine();
        CFmScriptDefine& operator=(const CFmScriptDefine& rhs);
        bool operator==(const CFmScriptDefine& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_scriptId() const
        {
            return m_iScriptId;
        }

        inline AISTD string get_name() const
        {
            return m_strName;
        }

        inline int32 get_useType() const
        {
            return m_iUseType;
        }

        inline int32 get_cmpMethod() const
        {
            return m_iCmpMethod;
        }

        inline int16 get_scriptType() const
        {
            return m_nScriptType;
        }

        inline int16 get_libCallType() const
        {
            return m_nLibCallType;
        }

        inline AISTD string get_libName() const
        {
            return m_strLibName;
        }

        inline AISTD string get_libClassName() const
        {
            return m_strLibClassName;
        }

        inline AISTD string get_funcName() const
        {
            return m_strFuncName;
        }

        inline int32 get_blobId() const
        {
            return m_iBlobId;
        }

        inline AISTD string get_script() const
        {
            return m_strScript;
        }

        inline AISTD string get_webPara() const
        {
            return m_strWebPara;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

    public:
        inline void set_scriptId(const int32& value)
        {
            m_iScriptId = value;
            m_llMarker |= BIT_SCRIPT_ID;
            m_llUsedMarker |= BIT_SCRIPT_ID;
        }

        inline void set_name(const AISTD string& value)
        {
            m_strName = value;
            m_llMarker |= BIT_NAME;
            m_llUsedMarker |= BIT_NAME;
        }

        inline void set_useType(const int32& value)
        {
            m_iUseType = value;
            m_llMarker |= BIT_USE_TYPE;
            m_llUsedMarker |= BIT_USE_TYPE;
        }

        inline void set_cmpMethod(const int32& value)
        {
            m_iCmpMethod = value;
            m_llMarker |= BIT_CMP_METHOD;
            m_llUsedMarker |= BIT_CMP_METHOD;
        }

        inline void set_scriptType(const int16& value)
        {
            m_nScriptType = value;
            m_llMarker |= BIT_SCRIPT_TYPE;
            m_llUsedMarker |= BIT_SCRIPT_TYPE;
        }

        inline void set_libCallType(const int16& value)
        {
            m_nLibCallType = value;
            m_llMarker |= BIT_LIB_CALL_TYPE;
            m_llUsedMarker |= BIT_LIB_CALL_TYPE;
        }

        inline void set_libName(const AISTD string& value)
        {
            m_strLibName = value;
            m_llMarker |= BIT_LIB_NAME;
            m_llUsedMarker |= BIT_LIB_NAME;
        }

        inline void set_libClassName(const AISTD string& value)
        {
            m_strLibClassName = value;
            m_llMarker |= BIT_LIB_CLASS_NAME;
            m_llUsedMarker |= BIT_LIB_CLASS_NAME;
        }

        inline void set_funcName(const AISTD string& value)
        {
            m_strFuncName = value;
            m_llMarker |= BIT_FUNC_NAME;
            m_llUsedMarker |= BIT_FUNC_NAME;
        }

        inline void set_blobId(const int32& value)
        {
            m_iBlobId = value;
            m_llMarker |= BIT_BLOB_ID;
            m_llUsedMarker |= BIT_BLOB_ID;
        }

        inline void set_script(const AISTD string& value)
        {
            m_strScript = value;
            m_llMarker |= BIT_SCRIPT;
            m_llUsedMarker |= BIT_SCRIPT;
        }

        inline void set_webPara(const AISTD string& value)
        {
            m_strWebPara = value;
            m_llMarker |= BIT_WEB_PARA;
            m_llUsedMarker |= BIT_WEB_PARA;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

    private: // data members
        int32		m_iScriptId;
        AISTD string		m_strName;
        int32		m_iUseType;
        int32		m_iCmpMethod;
        int16		m_nScriptType;
        int16		m_nLibCallType;
        AISTD string		m_strLibName;
        AISTD string		m_strLibClassName;
        AISTD string		m_strFuncName;
        int32		m_iBlobId;
        AISTD string		m_strScript;
        AISTD string		m_strWebPara;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        CBSDateTime		m_dtmDoneDate;
        AISTD string		m_strRemark;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMSCRIPTDEFINELIST
    // list definition for CFmScriptDefineList
    class CFmScriptDefineList : public CObdBasicListObject, public AISTD vector<CFmScriptDefine>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITSTATUSPOLLING
    class CAuditStatusPolling : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_FLOW_SUBTASK_ID,
            IDX_FLOW_INST_ID,
            IDX_PLAN_ID,
            IDX_FLOW_ID,
            IDX_STS,
            IDX_INSERT_DATE,
            IDX_REMARK,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_FLOW_SUBTASK_ID		= 0x1,
            BIT_FLOW_INST_ID		= 0x2,
            BIT_PLAN_ID		= 0x4,
            BIT_FLOW_ID		= 0x8,
            BIT_STS		= 0x10,
            BIT_INSERT_DATE		= 0x20,
            BIT_REMARK		= 0x40,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditStatusPolling();
        CAuditStatusPolling(const CAuditStatusPolling& rhs);
        ~CAuditStatusPolling();
        CAuditStatusPolling& operator=(const CAuditStatusPolling& rhs);
        bool operator==(const CAuditStatusPolling& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_flowSubtaskId() const
        {
            return m_llFlowSubtaskId;
        }

        inline int32 get_flowInstId() const
        {
            return m_iFlowInstId;
        }

        inline int64 get_planId() const
        {
            return m_llPlanId;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int16 get_sts() const
        {
            return m_nSts;
        }

        inline CBSDateTime get_insertDate() const
        {
            return m_dtmInsertDate;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

    public:
        inline void set_flowSubtaskId(const int64& value)
        {
            m_llFlowSubtaskId = value;
            m_llMarker |= BIT_FLOW_SUBTASK_ID;
            m_llUsedMarker |= BIT_FLOW_SUBTASK_ID;
        }

        inline void set_flowInstId(const int32& value)
        {
            m_iFlowInstId = value;
            m_llMarker |= BIT_FLOW_INST_ID;
            m_llUsedMarker |= BIT_FLOW_INST_ID;
        }

        inline void set_planId(const int64& value)
        {
            m_llPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_sts(const int16& value)
        {
            m_nSts = value;
            m_llMarker |= BIT_STS;
            m_llUsedMarker |= BIT_STS;
        }

        inline void set_insertDate(const CBSDateTime& value)
        {
            m_dtmInsertDate = value;
            m_llMarker |= BIT_INSERT_DATE;
            m_llUsedMarker |= BIT_INSERT_DATE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

    private: // data members
        int64		m_llFlowSubtaskId;
        int32		m_iFlowInstId;
        int64		m_llPlanId;
        int32		m_iFlowId;
        int16		m_nSts;
        CBSDateTime		m_dtmInsertDate;
        AISTD string		m_strRemark;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITSTATUSPOLLINGLIST
    // list definition for CAuditStatusPollingList
    class CAuditStatusPollingList : public CObdBasicListObject, public AISTD vector<CAuditStatusPolling>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITCMPREPAIRREL
    class CAuditCmpRepairRel : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_REPAIR_RULE_ID,
            IDX_CMP_TMPL_ID,
            IDX_RESULT_TYPE,
            IDX_RESULT_SUBTYPE,
            IDX_SYSTEM_ID,
            IDX_REPAIR_POS,
            IDX_SCRIPT_ID,
            IDX_IS_DEFAULT,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_REMARK,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_REPAIR_RULE_ID		= 0x1,
            BIT_CMP_TMPL_ID		= 0x2,
            BIT_RESULT_TYPE		= 0x4,
            BIT_RESULT_SUBTYPE		= 0x8,
            BIT_SYSTEM_ID		= 0x10,
            BIT_REPAIR_POS		= 0x20,
            BIT_SCRIPT_ID		= 0x40,
            BIT_IS_DEFAULT		= 0x80,
            BIT_VALID_DATE		= 0x100,
            BIT_EXPIRE_DATE		= 0x200,
            BIT_DONE_CODE		= 0x400,
            BIT_REMARK		= 0x800,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditCmpRepairRel();
        CAuditCmpRepairRel(const CAuditCmpRepairRel& rhs);
        ~CAuditCmpRepairRel();
        CAuditCmpRepairRel& operator=(const CAuditCmpRepairRel& rhs);
        bool operator==(const CAuditCmpRepairRel& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_repairRuleId() const
        {
            return m_iRepairRuleId;
        }

        inline int32 get_cmpTmplId() const
        {
            return m_iCmpTmplId;
        }

        inline AISTD string get_resultType() const
        {
            return m_strResultType;
        }

        inline AISTD string get_resultSubtype() const
        {
            return m_strResultSubtype;
        }

        inline int32 get_systemId() const
        {
            return m_iSystemId;
        }

        inline int16 get_repairPos() const
        {
            return m_nRepairPos;
        }

        inline int32 get_scriptId() const
        {
            return m_iScriptId;
        }

        inline int16 get_isDefault() const
        {
            return m_nIsDefault;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

    public:
        inline void set_repairRuleId(const int32& value)
        {
            m_iRepairRuleId = value;
            m_llMarker |= BIT_REPAIR_RULE_ID;
            m_llUsedMarker |= BIT_REPAIR_RULE_ID;
        }

        inline void set_cmpTmplId(const int32& value)
        {
            m_iCmpTmplId = value;
            m_llMarker |= BIT_CMP_TMPL_ID;
            m_llUsedMarker |= BIT_CMP_TMPL_ID;
        }

        inline void set_resultType(const AISTD string& value)
        {
            m_strResultType = value;
            m_llMarker |= BIT_RESULT_TYPE;
            m_llUsedMarker |= BIT_RESULT_TYPE;
        }

        inline void set_resultSubtype(const AISTD string& value)
        {
            m_strResultSubtype = value;
            m_llMarker |= BIT_RESULT_SUBTYPE;
            m_llUsedMarker |= BIT_RESULT_SUBTYPE;
        }

        inline void set_systemId(const int32& value)
        {
            m_iSystemId = value;
            m_llMarker |= BIT_SYSTEM_ID;
            m_llUsedMarker |= BIT_SYSTEM_ID;
        }

        inline void set_repairPos(const int16& value)
        {
            m_nRepairPos = value;
            m_llMarker |= BIT_REPAIR_POS;
            m_llUsedMarker |= BIT_REPAIR_POS;
        }

        inline void set_scriptId(const int32& value)
        {
            m_iScriptId = value;
            m_llMarker |= BIT_SCRIPT_ID;
            m_llUsedMarker |= BIT_SCRIPT_ID;
        }

        inline void set_isDefault(const int16& value)
        {
            m_nIsDefault = value;
            m_llMarker |= BIT_IS_DEFAULT;
            m_llUsedMarker |= BIT_IS_DEFAULT;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

    private: // data members
        int32		m_iRepairRuleId;
        int32		m_iCmpTmplId;
        AISTD string		m_strResultType;
        AISTD string		m_strResultSubtype;
        int32		m_iSystemId;
        int16		m_nRepairPos;
        int32		m_iScriptId;
        int16		m_nIsDefault;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        AISTD string		m_strRemark;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITCMPREPAIRRELLIST
    // list definition for CAuditCmpRepairRelList
    class CAuditCmpRepairRelList : public CObdBasicListObject, public AISTD vector<CAuditCmpRepairRel>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITREPAIRRULE
    class CAuditRepairRule : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_REPAIR_RULE_ID,
            IDX_RULE_NAME,
            IDX_GEN_WHERE,
            IDX_REPAIR_PLAN,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_REMARK,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_REPAIR_RULE_ID		= 0x1,
            BIT_RULE_NAME		= 0x2,
            BIT_GEN_WHERE		= 0x4,
            BIT_REPAIR_PLAN		= 0x8,
            BIT_VALID_DATE		= 0x10,
            BIT_EXPIRE_DATE		= 0x20,
            BIT_DONE_CODE		= 0x40,
            BIT_REMARK		= 0x80,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditRepairRule();
        CAuditRepairRule(const CAuditRepairRule& rhs);
        ~CAuditRepairRule();
        CAuditRepairRule& operator=(const CAuditRepairRule& rhs);
        bool operator==(const CAuditRepairRule& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_repairRuleId() const
        {
            return m_iRepairRuleId;
        }

        inline AISTD string get_ruleName() const
        {
            return m_strRuleName;
        }

        inline AISTD string get_genWhere() const
        {
            return m_strGenWhere;
        }

        inline AISTD string get_repairPlan() const
        {
            return m_strRepairPlan;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

    public:
        inline void set_repairRuleId(const int32& value)
        {
            m_iRepairRuleId = value;
            m_llMarker |= BIT_REPAIR_RULE_ID;
            m_llUsedMarker |= BIT_REPAIR_RULE_ID;
        }

        inline void set_ruleName(const AISTD string& value)
        {
            m_strRuleName = value;
            m_llMarker |= BIT_RULE_NAME;
            m_llUsedMarker |= BIT_RULE_NAME;
        }

        inline void set_genWhere(const AISTD string& value)
        {
            m_strGenWhere = value;
            m_llMarker |= BIT_GEN_WHERE;
            m_llUsedMarker |= BIT_GEN_WHERE;
        }

        inline void set_repairPlan(const AISTD string& value)
        {
            m_strRepairPlan = value;
            m_llMarker |= BIT_REPAIR_PLAN;
            m_llUsedMarker |= BIT_REPAIR_PLAN;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

    private: // data members
        int32		m_iRepairRuleId;
        AISTD string		m_strRuleName;
        AISTD string		m_strGenWhere;
        AISTD string		m_strRepairPlan;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        AISTD string		m_strRemark;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITREPAIRRULELIST
    // list definition for CAuditRepairRuleList
    class CAuditRepairRuleList : public CObdBasicListObject, public AISTD vector<CAuditRepairRule>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKMONITORCFG
    class CFmTaskMonitorCfg : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_MOD_NUM,
            IDX_IP_ADDR,
            IDX_PORT_NUM,
            IDX_IS_VALID,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_MOD_NUM		= 0x1,
            BIT_IP_ADDR		= 0x2,
            BIT_PORT_NUM		= 0x4,
            BIT_IS_VALID		= 0x8,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CFmTaskMonitorCfg();
        CFmTaskMonitorCfg(const CFmTaskMonitorCfg& rhs);
        ~CFmTaskMonitorCfg();
        CFmTaskMonitorCfg& operator=(const CFmTaskMonitorCfg& rhs);
        bool operator==(const CFmTaskMonitorCfg& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_modNum() const
        {
            return m_iModNum;
        }

        inline AISTD string get_ipAddr() const
        {
            return m_strIpAddr;
        }

        inline int32 get_portNum() const
        {
            return m_iPortNum;
        }

        inline int32 get_isValid() const
        {
            return m_iIsValid;
        }

    public:
        inline void set_modNum(const int32& value)
        {
            m_iModNum = value;
            m_llMarker |= BIT_MOD_NUM;
            m_llUsedMarker |= BIT_MOD_NUM;
        }

        inline void set_ipAddr(const AISTD string& value)
        {
            m_strIpAddr = value;
            m_llMarker |= BIT_IP_ADDR;
            m_llUsedMarker |= BIT_IP_ADDR;
        }

        inline void set_portNum(const int32& value)
        {
            m_iPortNum = value;
            m_llMarker |= BIT_PORT_NUM;
            m_llUsedMarker |= BIT_PORT_NUM;
        }

        inline void set_isValid(const int32& value)
        {
            m_iIsValid = value;
            m_llMarker |= BIT_IS_VALID;
            m_llUsedMarker |= BIT_IS_VALID;
        }

    private: // data members
        int32		m_iModNum;
        AISTD string		m_strIpAddr;
        int32		m_iPortNum;
        int32		m_iIsValid;
    };
    #define OBD_USE_MFLOWMANAGERDB_CFMTASKMONITORCFGLIST
    // list definition for CFmTaskMonitorCfgList
    class CFmTaskMonitorCfgList : public CObdBasicListObject, public AISTD vector<CFmTaskMonitorCfg>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITALARMTIMEOUTRECORD
    class CAuditAlarmTimeoutRecord : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_PLAN_ID,
            IDX_FLOW_ID,
            IDX_INST_ID,
            IDX_FLOW_TASK_ID,
            IDX_AUDIT_TASK_ID,
            IDX_STS,
            IDX_STS_DATE,
            IDX_EXPIRE_DATE,
            IDX_INSERT_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_PLAN_ID		= 0x1,
            BIT_FLOW_ID		= 0x2,
            BIT_INST_ID		= 0x4,
            BIT_FLOW_TASK_ID		= 0x8,
            BIT_AUDIT_TASK_ID		= 0x10,
            BIT_STS		= 0x20,
            BIT_STS_DATE		= 0x40,
            BIT_EXPIRE_DATE		= 0x80,
            BIT_INSERT_DATE		= 0x100,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditAlarmTimeoutRecord();
        CAuditAlarmTimeoutRecord(const CAuditAlarmTimeoutRecord& rhs);
        ~CAuditAlarmTimeoutRecord();
        CAuditAlarmTimeoutRecord& operator=(const CAuditAlarmTimeoutRecord& rhs);
        bool operator==(const CAuditAlarmTimeoutRecord& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int32 get_planId() const
        {
            return m_iPlanId;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int32 get_instId() const
        {
            return m_iInstId;
        }

        inline int64 get_flowTaskId() const
        {
            return m_llFlowTaskId;
        }

        inline int64 get_auditTaskId() const
        {
            return m_llAuditTaskId;
        }

        inline int16 get_sts() const
        {
            return m_nSts;
        }

        inline CBSDateTime get_stsDate() const
        {
            return m_dtmStsDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline CBSDateTime get_insertDate() const
        {
            return m_dtmInsertDate;
        }

    public:
        inline void set_planId(const int32& value)
        {
            m_iPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_instId(const int32& value)
        {
            m_iInstId = value;
            m_llMarker |= BIT_INST_ID;
            m_llUsedMarker |= BIT_INST_ID;
        }

        inline void set_flowTaskId(const int64& value)
        {
            m_llFlowTaskId = value;
            m_llMarker |= BIT_FLOW_TASK_ID;
            m_llUsedMarker |= BIT_FLOW_TASK_ID;
        }

        inline void set_auditTaskId(const int64& value)
        {
            m_llAuditTaskId = value;
            m_llMarker |= BIT_AUDIT_TASK_ID;
            m_llUsedMarker |= BIT_AUDIT_TASK_ID;
        }

        inline void set_sts(const int16& value)
        {
            m_nSts = value;
            m_llMarker |= BIT_STS;
            m_llUsedMarker |= BIT_STS;
        }

        inline void set_stsDate(const CBSDateTime& value)
        {
            m_dtmStsDate = value;
            m_llMarker |= BIT_STS_DATE;
            m_llUsedMarker |= BIT_STS_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_insertDate(const CBSDateTime& value)
        {
            m_dtmInsertDate = value;
            m_llMarker |= BIT_INSERT_DATE;
            m_llUsedMarker |= BIT_INSERT_DATE;
        }

    private: // data members
        int32		m_iPlanId;
        int32		m_iFlowId;
        int32		m_iInstId;
        int64		m_llFlowTaskId;
        int64		m_llAuditTaskId;
        int16		m_nSts;
        CBSDateTime		m_dtmStsDate;
        CBSDateTime		m_dtmExpireDate;
        CBSDateTime		m_dtmInsertDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITALARMTIMEOUTRECORDLIST
    // list definition for CAuditAlarmTimeoutRecordList
    class CAuditAlarmTimeoutRecordList : public CObdBasicListObject, public AISTD vector<CAuditAlarmTimeoutRecord>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITREPAIRORDER
    class CAuditRepairOrder : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_REPAIR_INDEX_ID,
            IDX_CMP_KEY,
            IDX_REPAIR_RULE_ID,
            IDX_VALID_DATE,
            IDX_STS,
            IDX_PARALLEL_SET,
            IDX_REGION_CODE,
            IDX_DEAL_NUMS,
            IDX_PRIMARY_KEY,
            IDX_TASK_DETAIL_ID,
            IDX_TASK_ID,
            IDX_UPDATE_DATE,
            IDX_CREATE_DATE,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_REPAIR_INDEX_ID		= 0x1,
            BIT_CMP_KEY		= 0x2,
            BIT_REPAIR_RULE_ID		= 0x4,
            BIT_VALID_DATE		= 0x8,
            BIT_STS		= 0x10,
            BIT_PARALLEL_SET		= 0x20,
            BIT_REGION_CODE		= 0x40,
            BIT_DEAL_NUMS		= 0x80,
            BIT_PRIMARY_KEY		= 0x100,
            BIT_TASK_DETAIL_ID		= 0x200,
            BIT_TASK_ID		= 0x400,
            BIT_UPDATE_DATE		= 0x800,
            BIT_CREATE_DATE		= 0x1000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditRepairOrder();
        CAuditRepairOrder(const CAuditRepairOrder& rhs);
        ~CAuditRepairOrder();
        CAuditRepairOrder& operator=(const CAuditRepairOrder& rhs);
        bool operator==(const CAuditRepairOrder& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_repairIndexId() const
        {
            return m_llRepairIndexId;
        }

        inline AISTD string get_cmpKey() const
        {
            return m_strCmpKey;
        }

        inline int32 get_repairRuleId() const
        {
            return m_iRepairRuleId;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline int16 get_sts() const
        {
            return m_nSts;
        }

        inline int64 get_parallelSet() const
        {
            return m_llParallelSet;
        }

        inline int16 get_regionCode() const
        {
            return m_nRegionCode;
        }

        inline int16 get_dealNums() const
        {
            return m_nDealNums;
        }

        inline AISTD string get_primaryKey() const
        {
            return m_strPrimaryKey;
        }

        inline int64 get_taskDetailId() const
        {
            return m_llTaskDetailId;
        }

        inline int64 get_taskId() const
        {
            return m_llTaskId;
        }

        inline CBSDateTime get_updateDate() const
        {
            return m_dtmUpdateDate;
        }

        inline CBSDateTime get_createDate() const
        {
            return m_dtmCreateDate;
        }

    public:
        inline void set_repairIndexId(const int64& value)
        {
            m_llRepairIndexId = value;
            m_llMarker |= BIT_REPAIR_INDEX_ID;
            m_llUsedMarker |= BIT_REPAIR_INDEX_ID;
        }

        inline void set_cmpKey(const AISTD string& value)
        {
            m_strCmpKey = value;
            m_llMarker |= BIT_CMP_KEY;
            m_llUsedMarker |= BIT_CMP_KEY;
        }

        inline void set_repairRuleId(const int32& value)
        {
            m_iRepairRuleId = value;
            m_llMarker |= BIT_REPAIR_RULE_ID;
            m_llUsedMarker |= BIT_REPAIR_RULE_ID;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_sts(const int16& value)
        {
            m_nSts = value;
            m_llMarker |= BIT_STS;
            m_llUsedMarker |= BIT_STS;
        }

        inline void set_parallelSet(const int64& value)
        {
            m_llParallelSet = value;
            m_llMarker |= BIT_PARALLEL_SET;
            m_llUsedMarker |= BIT_PARALLEL_SET;
        }

        inline void set_regionCode(const int16& value)
        {
            m_nRegionCode = value;
            m_llMarker |= BIT_REGION_CODE;
            m_llUsedMarker |= BIT_REGION_CODE;
        }

        inline void set_dealNums(const int16& value)
        {
            m_nDealNums = value;
            m_llMarker |= BIT_DEAL_NUMS;
            m_llUsedMarker |= BIT_DEAL_NUMS;
        }

        inline void set_primaryKey(const AISTD string& value)
        {
            m_strPrimaryKey = value;
            m_llMarker |= BIT_PRIMARY_KEY;
            m_llUsedMarker |= BIT_PRIMARY_KEY;
        }

        inline void set_taskDetailId(const int64& value)
        {
            m_llTaskDetailId = value;
            m_llMarker |= BIT_TASK_DETAIL_ID;
            m_llUsedMarker |= BIT_TASK_DETAIL_ID;
        }

        inline void set_taskId(const int64& value)
        {
            m_llTaskId = value;
            m_llMarker |= BIT_TASK_ID;
            m_llUsedMarker |= BIT_TASK_ID;
        }

        inline void set_updateDate(const CBSDateTime& value)
        {
            m_dtmUpdateDate = value;
            m_llMarker |= BIT_UPDATE_DATE;
            m_llUsedMarker |= BIT_UPDATE_DATE;
        }

        inline void set_createDate(const CBSDateTime& value)
        {
            m_dtmCreateDate = value;
            m_llMarker |= BIT_CREATE_DATE;
            m_llUsedMarker |= BIT_CREATE_DATE;
        }

    private: // data members
        int64		m_llRepairIndexId;
        AISTD string		m_strCmpKey;
        int32		m_iRepairRuleId;
        CBSDateTime		m_dtmValidDate;
        int16		m_nSts;
        int64		m_llParallelSet;
        int16		m_nRegionCode;
        int16		m_nDealNums;
        AISTD string		m_strPrimaryKey;
        int64		m_llTaskDetailId;
        int64		m_llTaskId;
        CBSDateTime		m_dtmUpdateDate;
        CBSDateTime		m_dtmCreateDate;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITREPAIRORDERLIST
    // list definition for CAuditRepairOrderList
    class CAuditRepairOrderList : public CObdBasicListObject, public AISTD vector<CAuditRepairOrder>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITPLAN
    class CAuditPlan : public CObdBasicStructObject
    {
    public: // constant definitions
        enum { // field indexes
            IDX_PLAN_ID,
            IDX_PLAN_NAME,
            IDX_PLAN_DESC,
            IDX_BUSI_ID,
            IDX_FLOW_ID,
            IDX_TASK_ID,
            IDX_CMP_ID,
            IDX_HLR_AUDIT,
            IDX_HANDLE_NET,
            IDX_HANDLE_REGION,
            IDX_RUN_NUMS,
            IDX_CYCLE_TYPE,
            IDX_CYCLE_PARAM,
            IDX_FRONT_PLAN_ID,
            IDX_BLADE_UNIT,
            IDX_CHANNEL_ID,
            IDX_PRIORITY_ID,
            IDX_NEXT_RUN_DATE,
            IDX_FIRST_TASK_TIME,
            IDX_LAST_TASK_TIME,
            IDX_RELEASE_STATUS,
            IDX_LAST_TASK_STS,
            IDX_FAIL_NUMS,
            IDX_RUN_STS,
            IDX_CREATE_DATE,
            IDX_VALID_DATE,
            IDX_EXPIRE_DATE,
            IDX_DONE_CODE,
            IDX_DONE_DATE,
            IDX_REMARK,
            IDX_SAME_INTO_DB_FLAG,
            MAX_FIELD_INDEX
        };

        enum {
            BIT_PLAN_ID		= 0x1,
            BIT_PLAN_NAME		= 0x2,
            BIT_PLAN_DESC		= 0x4,
            BIT_BUSI_ID		= 0x8,
            BIT_FLOW_ID		= 0x10,
            BIT_TASK_ID		= 0x20,
            BIT_CMP_ID		= 0x40,
            BIT_HLR_AUDIT		= 0x80,
            BIT_HANDLE_NET		= 0x100,
            BIT_HANDLE_REGION		= 0x200,
            BIT_RUN_NUMS		= 0x400,
            BIT_CYCLE_TYPE		= 0x800,
            BIT_CYCLE_PARAM		= 0x1000,
            BIT_FRONT_PLAN_ID		= 0x2000,
            BIT_BLADE_UNIT		= 0x4000,
            BIT_CHANNEL_ID		= 0x8000,
            BIT_PRIORITY_ID		= 0x10000,
            BIT_NEXT_RUN_DATE		= 0x20000,
            BIT_FIRST_TASK_TIME		= 0x40000,
            BIT_LAST_TASK_TIME		= 0x80000,
            BIT_RELEASE_STATUS		= 0x100000,
            BIT_LAST_TASK_STS		= 0x200000,
            BIT_FAIL_NUMS		= 0x400000,
            BIT_RUN_STS		= 0x800000,
            BIT_CREATE_DATE		= 0x1000000,
            BIT_VALID_DATE		= 0x2000000,
            BIT_EXPIRE_DATE		= 0x4000000,
            BIT_DONE_CODE		= 0x8000000,
            BIT_DONE_DATE		= 0x10000000,
            BIT_REMARK		= 0x20000000,
            BIT_SAME_INTO_DB_FLAG		= 0x40000000,
            BIT_DUMMY
        };
        static const uint64    BITS_ALL_MARKER;
        static const uint64    BITS_NOT_NULL_MARKER;
        static const uint64    BITS_DB_MARKER;
        static const int       IMPORT_TABLE_COUNT;
        static const int       MEMBER_FIELD_COUNT;
        static const char*     SZ_TYPE_NAME;
        static const char*     ARRAY_IMPORT_TABLES[];
        static const SObdMemberTypeInfo* ARRAY_MEMBER_TYPE_INFO;

    public:
        CAuditPlan();
        CAuditPlan(const CAuditPlan& rhs);
        ~CAuditPlan();
        CAuditPlan& operator=(const CAuditPlan& rhs);
        bool operator==(const CAuditPlan& rhs) const;

        const CObdTypeInfo& get_typeInfo() const;
        const CClassDesc& class_desc() const;
        const void* get_addressTable(const void* pTable[64]) const;

    public:
        inline int64 get_planId() const
        {
            return m_llPlanId;
        }

        inline AISTD string get_planName() const
        {
            return m_strPlanName;
        }

        inline AISTD string get_planDesc() const
        {
            return m_strPlanDesc;
        }

        inline int32 get_busiId() const
        {
            return m_iBusiId;
        }

        inline int32 get_flowId() const
        {
            return m_iFlowId;
        }

        inline int64 get_taskId() const
        {
            return m_llTaskId;
        }

        inline int32 get_cmpId() const
        {
            return m_iCmpId;
        }

        inline int16 get_hlrAudit() const
        {
            return m_nHlrAudit;
        }

        inline AISTD string get_handleNet() const
        {
            return m_strHandleNet;
        }

        inline AISTD string get_handleRegion() const
        {
            return m_strHandleRegion;
        }

        inline int32 get_runNums() const
        {
            return m_iRunNums;
        }

        inline int16 get_cycleType() const
        {
            return m_nCycleType;
        }

        inline AISTD string get_cycleParam() const
        {
            return m_strCycleParam;
        }

        inline int64 get_frontPlanId() const
        {
            return m_llFrontPlanId;
        }

        inline int16 get_bladeUnit() const
        {
            return m_nBladeUnit;
        }

        inline int16 get_channelId() const
        {
            return m_nChannelId;
        }

        inline int16 get_priorityId() const
        {
            return m_nPriorityId;
        }

        inline CBSDateTime get_nextRunDate() const
        {
            return m_dtmNextRunDate;
        }

        inline CBSDateTime get_firstTaskTime() const
        {
            return m_dtmFirstTaskTime;
        }

        inline CBSDateTime get_lastTaskTime() const
        {
            return m_dtmLastTaskTime;
        }

        inline int16 get_releaseStatus() const
        {
            return m_nReleaseStatus;
        }

        inline int16 get_lastTaskSts() const
        {
            return m_nLastTaskSts;
        }

        inline int32 get_failNums() const
        {
            return m_iFailNums;
        }

        inline int16 get_runSts() const
        {
            return m_nRunSts;
        }

        inline CBSDateTime get_createDate() const
        {
            return m_dtmCreateDate;
        }

        inline CBSDateTime get_validDate() const
        {
            return m_dtmValidDate;
        }

        inline CBSDateTime get_expireDate() const
        {
            return m_dtmExpireDate;
        }

        inline int64 get_doneCode() const
        {
            return m_llDoneCode;
        }

        inline CBSDateTime get_doneDate() const
        {
            return m_dtmDoneDate;
        }

        inline AISTD string get_remark() const
        {
            return m_strRemark;
        }

        inline int16 get_sameIntoDbFlag() const
        {
            return m_nSameIntoDbFlag;
        }

    public:
        inline void set_planId(const int64& value)
        {
            m_llPlanId = value;
            m_llMarker |= BIT_PLAN_ID;
            m_llUsedMarker |= BIT_PLAN_ID;
        }

        inline void set_planName(const AISTD string& value)
        {
            m_strPlanName = value;
            m_llMarker |= BIT_PLAN_NAME;
            m_llUsedMarker |= BIT_PLAN_NAME;
        }

        inline void set_planDesc(const AISTD string& value)
        {
            m_strPlanDesc = value;
            m_llMarker |= BIT_PLAN_DESC;
            m_llUsedMarker |= BIT_PLAN_DESC;
        }

        inline void set_busiId(const int32& value)
        {
            m_iBusiId = value;
            m_llMarker |= BIT_BUSI_ID;
            m_llUsedMarker |= BIT_BUSI_ID;
        }

        inline void set_flowId(const int32& value)
        {
            m_iFlowId = value;
            m_llMarker |= BIT_FLOW_ID;
            m_llUsedMarker |= BIT_FLOW_ID;
        }

        inline void set_taskId(const int64& value)
        {
            m_llTaskId = value;
            m_llMarker |= BIT_TASK_ID;
            m_llUsedMarker |= BIT_TASK_ID;
        }

        inline void set_cmpId(const int32& value)
        {
            m_iCmpId = value;
            m_llMarker |= BIT_CMP_ID;
            m_llUsedMarker |= BIT_CMP_ID;
        }

        inline void set_hlrAudit(const int16& value)
        {
            m_nHlrAudit = value;
            m_llMarker |= BIT_HLR_AUDIT;
            m_llUsedMarker |= BIT_HLR_AUDIT;
        }

        inline void set_handleNet(const AISTD string& value)
        {
            m_strHandleNet = value;
            m_llMarker |= BIT_HANDLE_NET;
            m_llUsedMarker |= BIT_HANDLE_NET;
        }

        inline void set_handleRegion(const AISTD string& value)
        {
            m_strHandleRegion = value;
            m_llMarker |= BIT_HANDLE_REGION;
            m_llUsedMarker |= BIT_HANDLE_REGION;
        }

        inline void set_runNums(const int32& value)
        {
            m_iRunNums = value;
            m_llMarker |= BIT_RUN_NUMS;
            m_llUsedMarker |= BIT_RUN_NUMS;
        }

        inline void set_cycleType(const int16& value)
        {
            m_nCycleType = value;
            m_llMarker |= BIT_CYCLE_TYPE;
            m_llUsedMarker |= BIT_CYCLE_TYPE;
        }

        inline void set_cycleParam(const AISTD string& value)
        {
            m_strCycleParam = value;
            m_llMarker |= BIT_CYCLE_PARAM;
            m_llUsedMarker |= BIT_CYCLE_PARAM;
        }

        inline void set_frontPlanId(const int64& value)
        {
            m_llFrontPlanId = value;
            m_llMarker |= BIT_FRONT_PLAN_ID;
            m_llUsedMarker |= BIT_FRONT_PLAN_ID;
        }

        inline void set_bladeUnit(const int16& value)
        {
            m_nBladeUnit = value;
            m_llMarker |= BIT_BLADE_UNIT;
            m_llUsedMarker |= BIT_BLADE_UNIT;
        }

        inline void set_channelId(const int16& value)
        {
            m_nChannelId = value;
            m_llMarker |= BIT_CHANNEL_ID;
            m_llUsedMarker |= BIT_CHANNEL_ID;
        }

        inline void set_priorityId(const int16& value)
        {
            m_nPriorityId = value;
            m_llMarker |= BIT_PRIORITY_ID;
            m_llUsedMarker |= BIT_PRIORITY_ID;
        }

        inline void set_nextRunDate(const CBSDateTime& value)
        {
            m_dtmNextRunDate = value;
            m_llMarker |= BIT_NEXT_RUN_DATE;
            m_llUsedMarker |= BIT_NEXT_RUN_DATE;
        }

        inline void set_firstTaskTime(const CBSDateTime& value)
        {
            m_dtmFirstTaskTime = value;
            m_llMarker |= BIT_FIRST_TASK_TIME;
            m_llUsedMarker |= BIT_FIRST_TASK_TIME;
        }

        inline void set_lastTaskTime(const CBSDateTime& value)
        {
            m_dtmLastTaskTime = value;
            m_llMarker |= BIT_LAST_TASK_TIME;
            m_llUsedMarker |= BIT_LAST_TASK_TIME;
        }

        inline void set_releaseStatus(const int16& value)
        {
            m_nReleaseStatus = value;
            m_llMarker |= BIT_RELEASE_STATUS;
            m_llUsedMarker |= BIT_RELEASE_STATUS;
        }

        inline void set_lastTaskSts(const int16& value)
        {
            m_nLastTaskSts = value;
            m_llMarker |= BIT_LAST_TASK_STS;
            m_llUsedMarker |= BIT_LAST_TASK_STS;
        }

        inline void set_failNums(const int32& value)
        {
            m_iFailNums = value;
            m_llMarker |= BIT_FAIL_NUMS;
            m_llUsedMarker |= BIT_FAIL_NUMS;
        }

        inline void set_runSts(const int16& value)
        {
            m_nRunSts = value;
            m_llMarker |= BIT_RUN_STS;
            m_llUsedMarker |= BIT_RUN_STS;
        }

        inline void set_createDate(const CBSDateTime& value)
        {
            m_dtmCreateDate = value;
            m_llMarker |= BIT_CREATE_DATE;
            m_llUsedMarker |= BIT_CREATE_DATE;
        }

        inline void set_validDate(const CBSDateTime& value)
        {
            m_dtmValidDate = value;
            m_llMarker |= BIT_VALID_DATE;
            m_llUsedMarker |= BIT_VALID_DATE;
        }

        inline void set_expireDate(const CBSDateTime& value)
        {
            m_dtmExpireDate = value;
            m_llMarker |= BIT_EXPIRE_DATE;
            m_llUsedMarker |= BIT_EXPIRE_DATE;
        }

        inline void set_doneCode(const int64& value)
        {
            m_llDoneCode = value;
            m_llMarker |= BIT_DONE_CODE;
            m_llUsedMarker |= BIT_DONE_CODE;
        }

        inline void set_doneDate(const CBSDateTime& value)
        {
            m_dtmDoneDate = value;
            m_llMarker |= BIT_DONE_DATE;
            m_llUsedMarker |= BIT_DONE_DATE;
        }

        inline void set_remark(const AISTD string& value)
        {
            m_strRemark = value;
            m_llMarker |= BIT_REMARK;
            m_llUsedMarker |= BIT_REMARK;
        }

        inline void set_sameIntoDbFlag(const int16& value)
        {
            m_nSameIntoDbFlag = value;
            m_llMarker |= BIT_SAME_INTO_DB_FLAG;
            m_llUsedMarker |= BIT_SAME_INTO_DB_FLAG;
        }

    private: // data members
        int64		m_llPlanId;
        AISTD string		m_strPlanName;
        AISTD string		m_strPlanDesc;
        int32		m_iBusiId;
        int32		m_iFlowId;
        int64		m_llTaskId;
        int32		m_iCmpId;
        int16		m_nHlrAudit;
        AISTD string		m_strHandleNet;
        AISTD string		m_strHandleRegion;
        int32		m_iRunNums;
        int16		m_nCycleType;
        AISTD string		m_strCycleParam;
        int64		m_llFrontPlanId;
        int16		m_nBladeUnit;
        int16		m_nChannelId;
        int16		m_nPriorityId;
        CBSDateTime		m_dtmNextRunDate;
        CBSDateTime		m_dtmFirstTaskTime;
        CBSDateTime		m_dtmLastTaskTime;
        int16		m_nReleaseStatus;
        int16		m_nLastTaskSts;
        int32		m_iFailNums;
        int16		m_nRunSts;
        CBSDateTime		m_dtmCreateDate;
        CBSDateTime		m_dtmValidDate;
        CBSDateTime		m_dtmExpireDate;
        int64		m_llDoneCode;
        CBSDateTime		m_dtmDoneDate;
        AISTD string		m_strRemark;
        int16		m_nSameIntoDbFlag;
    };
    #define OBD_USE_MFLOWMANAGERDB_CAUDITPLANLIST
    // list definition for CAuditPlanList
    class CAuditPlanList : public CObdBasicListObject, public AISTD vector<CAuditPlan>
    {
    public:
        void* append_item();
        void change_size(const int iNewSize);
        const void* get_addrOfFirstItem() const;
        int get_containerType() const;
        int get_itemSize() const;
        int get_size() const;
        const CObdTypeInfo& get_typeInfo() const;
    };}

#endif

