/**
 * @file dmcext_template_mgr.cpp
 * @brief  base class for all mgr
 * @author huangkun, huangkun@asiainfo-linkage.com
 * @copyright(c) 2003-2012, Asiainfo HangZhou. All rights reserved.
 * @version 1.0
 * @date 2011-08-23
 */
#ifndef _DMCEXT_TEMPLATE_MGR_CPP_
#define _DMCEXT_TEMPLATE_MGR_CPP_

#include "dmcext_template_mgr.h"

#include "ob_kernel.h"
#include "ob_session.h"
#include "ailog.h"

template <class CObdDataList>
CDmcextTemplateMgr<CObdDataList>::CDmcextTemplateMgr( 
    SOBSession* pSession, 
    const AISTD string& strDbName, 
    const AISTD string& strSchemeName,
    const AISTD string& strCenterId,
    const AISTD string& strTableName,
    const AISTD string& strFlag):
    CDmcextTemplateMgrBase(pSession, strDbName, strSchemeName, strCenterId,strFlag)
{
    if( strTableName.empty() )
        initTableName();
    else
        m_strTableName = strTableName;
}

template <class CObdDataList>
CDmcextTemplateMgr<CObdDataList>::~CDmcextTemplateMgr()
{
    //LogAppend(INFO_LEVEL, "InfoLevel", "===call CDmcextTemplateMgr<CObdDataList>::~CDmcextTemplateMgr success$===");
}

template <class CObdDataList>
int32 CDmcextTemplateMgr<CObdDataList>::selectFromTable(
    const CObdData& cObdData,
    const AISTD string& strCond,
    CObdDataList& listCObdData,
    CBSErrorMsg& cErrorMsg)
{
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::selectFromTable begin$");
    if( !dbConnect )
    {
        LogAppend(INFO_LEVEL, "DebugInfo", "dbConnect is NULL$");
        return OBD_EXCEPTION;
    }
    AISTD string strSql = "";
    if( cObdData.get_usedSet() != 0 && strCond != "" )
        strSql = " and ";
    strSql += strCond;
    AISTD string strName="";
    if(m_strFlag.empty())
      strName=m_strSchemeName + m_strCenterId;
    else   
      strName=m_strSchemeName;    
    try
    {
        ob_kernel<CObdDataList> cKernel( *dbConnect, strName);
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strTableName=" + m_strTableName).c_str());
        cKernel.select_all( listCObdData, cObdData, strSql.c_str(), m_strTableName.c_str());
    }
    catch(CBSErrorMsg& cNewErrorMsg)
    {
        cErrorMsg = cNewErrorMsg;
        cErrorMsg.set_hint(AISTD string("SELECT FROM " + m_strTableName + " ERROR$"));
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("SELECT FROM " + m_strTableName + " ERROR$").c_str());
        return OBD_EXCEPTION;
    }
    LogAppend( INFO_LEVEL, "DebugInfo", AISTD string("CALL CDmcextTemplateMgr::selectFromTable " + m_strTableName + " success$").c_str());
    return OBD_OK;
}

template <class CObdDataList>
int32 CDmcextTemplateMgr<CObdDataList>::insertIntoTable(
    const CObdData& cObdData,
    CBSErrorMsg& cErrorMsg)
{
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::insertIntoTable begin$");
    if( !dbConnect )
    {
        LogAppend(INFO_LEVEL, "DebugInfo", "dbConnect is NULL$");
        return OBD_EXCEPTION;
    }
    if( !cObdData.get_usedSet() )
    {
        LogAppend( INFO_LEVEL, "InfoLevel", "No data in cObdData$");
        return OBD_FAIL;
    }
    AISTD string strName="";
    if(m_strFlag.empty())
      strName=m_strSchemeName + m_strCenterId;
    else   
      strName=m_strSchemeName;  
    try
    {
        ob_kernel<CObdDataList> cKernel( *dbConnect, strName );
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strTableName=" + m_strTableName).c_str());
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strSchemeName=" + strName).c_str());
        cKernel.insert( cObdData, false, m_strTableName.c_str() );
    }
    catch(CBSErrorMsg& cNewErrorMsg)
    {
        cErrorMsg = cNewErrorMsg;
        cErrorMsg.set_hint(AISTD string("INSERT INTO TABLE " + m_strTableName + " ERROR$"));
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("INSERT INTO TABLE " + m_strTableName + " ERROR$"));
        return OBD_EXCEPTION;
    }	
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::insertIntoTable success$");
    return OBD_OK;
}

template <class CObdDataList>
int32 CDmcextTemplateMgr<CObdDataList>::insertIntoTable(
    const CObdDataList& listCObdData,
    CBSErrorMsg& cErrorMsg)
{
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::insertIntoTable begin$");
    if( !dbConnect )
    {
        LogAppend(INFO_LEVEL, "DebugInfo", "dbConnect is NULL$");
        return OBD_EXCEPTION;
    }
    if( !listCObdData.size() )
    {
        LogAppend( INFO_LEVEL, "InfoLevel", "No data in listCObdData$");
        return OBD_FAIL;
    }
    AISTD string strName="";
    if(m_strFlag.empty())
      strName=m_strSchemeName + m_strCenterId;
    else   
      strName=m_strSchemeName; 
    try
    {
        ob_kernel<CObdDataList> cKernel( *dbConnect, strName);
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strTableName=" + m_strTableName).c_str());
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strSchemeName=" + strName).c_str());
        cKernel.insert( listCObdData, false, m_strTableName.c_str() );
    }
    catch(CBSErrorMsg& cNewErrorMsg)
    {
        cErrorMsg = cNewErrorMsg;
        cErrorMsg.set_hint(AISTD string("INSERT INTO TABLE " + m_strTableName + " ERROR$"));
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("INSERT INTO TABLE " + m_strTableName + " ERROR$"));
        return OBD_EXCEPTION;
    }	
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::insertIntoTable success$");
    return OBD_OK;	
}

template <class CObdDataList>
int32 CDmcextTemplateMgr<CObdDataList>::updateToTable(
    const CObdData& cObdDataOld,
    const CObdData& cObdDataNew,
    const AISTD string& strCond,
    CBSErrorMsg& cErrorMsg)
{
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::updateToTable begin$");
    if( !dbConnect )
    {
        LogAppend(INFO_LEVEL, "DebugInfo", "dbConnect is NULL$");
        return OBD_EXCEPTION;
    }
    if( !cObdDataOld.get_usedSet() || !cObdDataNew.get_usedSet() )
    {
        LogAppend( INFO_LEVEL, "InfoLevel", "No data in cObdData$");
        return OBD_FAIL;
    }
    AISTD string strSql = "";
    if( cObdDataOld.get_usedSet() != 0 && strCond != "" )
        strSql = " and ";
    strSql += strCond;
    AISTD string strName="";
    if(m_strFlag.empty())
      strName=m_strSchemeName + m_strCenterId;
    else   
      strName=m_strSchemeName; 
    try
    {
        ob_kernel<CObdDataList> cKernel( *dbConnect,strName);
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strTableName=" + m_strTableName).c_str());
        cKernel.update( cObdDataNew, cObdDataOld, false, strSql.c_str(), m_strTableName.c_str() );
    }
    catch(CBSErrorMsg& cNewErrorMsg)
    {
        cErrorMsg = cNewErrorMsg;
        cErrorMsg.set_hint(AISTD string("UPDATE FROM TABLE " + m_strTableName + " ERROR$"));
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("UPDATE FROM TABLE " + m_strTableName + " ERROR$"));
        return OBD_EXCEPTION;
    }	
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::updateToTable success$");
    return OBD_OK;	
}

template <class CObdDataList>
int32 CDmcextTemplateMgr<CObdDataList>::deleteFromTable(
    const CObdData& cObdData,
    const AISTD string& strCond,
    CBSErrorMsg& cErrorMsg)
{
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::deleteFromTable begin$");
    if( !dbConnect )
    {
        LogAppend(INFO_LEVEL, "DebugInfo", "dbConnect is NULL$");
        return OBD_EXCEPTION;
    }
    if( !cObdData.get_usedSet() )
    {
        LogAppend( INFO_LEVEL, "InfoLevel", "No data in cObdData$");
        return OBD_FAIL;
    }
    AISTD string strSql = "";
    if( cObdData.get_usedSet() != 0 && strCond != "" )
        strSql = " and ";
    strSql += strCond;
    AISTD string strName="";
    if(m_strFlag.empty())
      strName=m_strSchemeName + m_strCenterId;
    else   
      strName=m_strSchemeName; 
    try
    {
        ob_kernel<CObdDataList> cKernel( *dbConnect,strName );
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("m_strTableName=" + m_strTableName).c_str());
        cKernel.remove( cObdData, false, strSql.c_str(), m_strTableName.c_str() );
    }
    catch(CBSErrorMsg& cNewErrorMsg)
    {
        cErrorMsg = cNewErrorMsg;
        cErrorMsg.set_hint(AISTD string("DELETE FROM TABLE " + m_strTableName + " ERROR$"));
        LogAppend( INFO_LEVEL, "InfoLevel", AISTD string("DELETE FROM TABLE " + m_strTableName + " ERROR$"));
        return OBD_EXCEPTION;
    }	
    LogAppend(INFO_LEVEL,"DebugInfo","CALL CDmcextTemplateMgr::deleteFromTable success$");
    return OBD_OK;	
}
#endif
