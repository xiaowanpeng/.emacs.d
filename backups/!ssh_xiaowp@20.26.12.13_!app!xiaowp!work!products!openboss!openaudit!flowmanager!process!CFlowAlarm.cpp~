#include "base_func.h"

#include "thread_value.h"
#include "openbroker/OBClient.h"
#include "openbroker/svr_ctrl.h"
#include "ob_session.h"
#include "ob_kernel.h"
#include "tool.h"


#include "CFlowAlarm.h"



CFlowAlarm::CFlowAlarm()
{
}

CFlowAlarm::~CFlowAlarm()
{
}

int CFlowAlarm::do_alarm (
    SOBSession* pSession,
    const int32& nPlanId,
    const int32& nInstId,
    const int16& nRunPos,
    CBSErrorMsg& cErrorMsg )
{
    LogAppend(DEBUG_LEVEL,"InfoLevel","enter CFlowAlarm::do_alarm ok.");

    std::auto_ptr< CDmcextTemplateMgr<CAuditAlarmDefineList> > tAuditAlarmDefine = CDmcextAuditMgr::getAuditAlarmDefine(pSession);
    CAuditAlarmDefine cAuditAlarmDefine;
    CAuditAlarmDefineList listcAuditAlarmDefine;

    cAuditAlarmDefine.set_planId(nPlanId);
    cAuditAlarmDefine.set_instId(nInstId);
    cAuditAlarmDefine.set_runPosition(nRunPos);

    if(tAuditAlarmDefine->selectFromTable(
           cAuditAlarmDefine,
           "sysdate between valid_date and expire_date",
           listcAuditAlarmDefine,
           cErrorMsg))
    {
        DMCEXT_ERROR_LOG("tAuditAlarmDefine->selectFromTable");
    }

    if (listcAuditAlarmDefine.empty())
    {
        LogAppend(DEBUG_LEVEL,"InfoLevel","告警配置不存在.");
        return -1;
    }

    CAuditAlarmDefineList::iterator itr;
    for (itr = listcAuditAlarmDefine.begin();
         itr != listcAuditAlarmDefine.end();
         itr ++)
    {
        bool bIsAlarm = false;
        
        if (is_alarm (
                 pSession,
                 *itr,
                 bIsAlarm,
                 cErrorMsg))
        {
            LogAppend(DEBUG_LEVEL,"InfoLevel","call is_alarm error.");
            return -1;
        }

        if (bIsAlarm)
        {
        }
    }
    
    LogAppend(DEBUG_LEVEL,"InfoLevel","leave CFlowAlarm::do_alarm ok.");
    return 0;
}

int CFlowAlarm::is_alarm (
    SOBSession* pSession,
    const CAuditAlarmDefine& cAuditAlarmDefine,
    bool& bIsAlarm,
    CBSErrorMsg& cErrorMsg )
{
    LogAppend(DEBUG_LEVEL,"InfoLevel","enter CFlowAlarm::is_alarm ok.");
    
    LogAppend(DEBUG_LEVEL,"InfoLevel","leave CFlowAlarm::is_alarm ok.");
    return 0;
}
