#include "base_func.h"

#include "thread_value.h"
#include "openbroker/OBClient.h"
#include "openbroker/svr_ctrl.h"
#include "ob_session.h"
#include "ob_kernel.h"
#include "c_uni_socket.h"
#include "DataAudit_db_obd_c.h"
#include "tool.h"
#include "socket_pool.h"
#define OBD_SESSION_NAME "_Session"
AISTD string g_strConfigFile;
AISTD string g_strTypeName;
AISTD string g_strModuleName;
#define OBD_SESSION_NAME		"_Session"
int main(int argc, char *argv[])
{
  	int     inch=0;
	const char *chOptString="I:i:M:m:Hh";
	while ((inch = getopt(argc, argv, chOptString)) != EOF)
	{
	    switch (inch)
  	    {	
  	  	case	'I':
    		case	'i':
		    {
		        g_strConfigFile = optarg;
		        break;
		    }
	   	 case	'M':
	   	 case	'm':
		    {
		        g_strModuleName = optarg;
		        break;
		    }
	   	 case 'H':
	   	 case 'h':
	   		 {
	    			exit(0);
	   	 	}	
	   	 default:
	   	 {
	   	 	break;
	   	 }
  	  }
	}
	g_strConfigFile="luxin.cfg";
	g_strModuleName="luxin";
	if(!init_server(g_strModuleName, argc, argv))
	{
		std::cerr<<"error!!"<<std::endl;
		exit(0);
	}

	LogAppend(DEBUG_LEVEL,"InfoLevel","初始化数据库容器");
	SOBSession *pSession;
	CThreadValueHolder cThreadValueHolder; 
	try                                   
	{         	                 
		if (CThreadValueMgr::set_value(OBD_SESSION_NAME, SOBSession()) < 0)                    
		{                                                                                              
		  LogAppend(FATAL_LEVEL, "DebugInfo", "DEAL_CLIENT 初始化数据库容器错误!");                  
		  return -2;                                                                               
		}                                                                                       
		pSession = CThreadValueMgr::get_value<SOBSession>(OBD_SESSION_NAME);                   
		pSession->m_pDbConn = pSession->get_dbConn();                                         
	}                                                                                           
	catch(...)                                                                                
	{                                                                                        
		LogAppend(FATAL_LEVEL, "DebugInfo", "初始化数据库容器错误!");              
	}                                                                                                
	LogAppend(DEBUG_LEVEL,"InfoLevel","成功初始化数据库容器");											


        /*	SRepair sRepair;
	AISTD string strTaskId;
  	AISTD string strBatchId;
	CBSErrorMsg cErrorMsg;
	//获取修复任务测试	
	//sRepair.get_task(pSession,AISTD string("1|2|3"),MAX_DEAL_DETAIL,strTaskId,strBatchId,cErrorMsg);
	//LogAppend(DEBUG_LEVEL,"InfoLevel",AISTD string("taskId:"+strTaskId).c_str());	
	//LogAppend(DEBUG_LEVEL,"InfoLevel",AISTD string("batchId:"+strBatchId).c_str());	
	AISTD string strDistinctType="00001";
	int32 icmp_id =1 ;
	sRepair.genRepairRecord(pSession,icmp_id,strDistinctType,cErrorMsg); */

/*
	ob_whereCond cCond;
	cCond << OCS("rownum<10") ;
	ob_kernel<MDataAuditDb::CAuditTaskDetailList> cKernel(*(pSession->get_dbConn()),"");
	MDataAuditDb::CAuditTaskDetailList listTaskDetail;
	cKernel.select_allExt(listTaskDetail,cCond);
	std::cout<<listTaskDetail.size()<<std::endl;	
	return 0;
*/
}
