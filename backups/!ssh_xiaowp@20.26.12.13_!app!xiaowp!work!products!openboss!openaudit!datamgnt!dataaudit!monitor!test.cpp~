#include "base_func.h"

#include "thread_value.h"
#include "openbroker/OBClient.h"
#include "openbroker/svr_ctrl.h"
#include "ob_session.h"
#include "ob_kernel.h"
#include "c_uni_socket.h"
#include "DataAudit_db_obd_c.h"
#include "tool.h"
#include "socket_pool.h"
#define OBD_SESSION_NAME "_Session"
#include "crepair.h"
#include "srepair.h"
#include "DataAudit_db_obd_c.h"
AISTD string g_strConfigFile;
AISTD string g_strTypeName;
AISTD string g_strModuleName;

int main(int argc, char *argv[])
{
	int   inch=0;
	const char *chOptString="I:i:M:m:Hh";
	while ((inch = getopt(argc, argv, chOptString)) != EOF)
	{
	    switch (inch)
  	    {	
  	  	case	'I':
    		case	'i':
		    {
		        g_strConfigFile = optarg;
		        break;
		    }
	   	 case	'M':
	   	 case	'm':
		    {
		        g_strModuleName = optarg;
		        break;
		    }
	   	 case 'H':
	   	 case 'h':
	   		 {
	    			exit(0);
	   	 	}	
	   	 default:
	   	 {
	   	 	break;
	   	 }
  	  }
	}
	g_strConfigFile="luxin.cfg";
	g_strModuleName="luxin";
	if(!init_server(g_strModuleName, argc, argv))
	{
		std::cerr<<"error!!"<<std::endl;
		exit(0);
	}

	LogAppend(DEBUG_LEVEL,"InfoLevel","初始化数据库容器");
	SOBSession *pSession;
	CThreadValueHolder cThreadValueHolder; 
	try                                   
	{         	                 
		if (CThreadValueMgr::set_value(OBD_SESSION_NAME, SOBSession()) < 0)                    
		{                                                                                              
		  LogAppend(FATAL_LEVEL, "DebugInfo", "DEAL_CLIENT 初始化数据库容器错误!");                  
		  return -2;                                                                               
		}                                                                                       
		pSession = CThreadValueMgr::get_value<SOBSession>(OBD_SESSION_NAME);                   
		pSession->m_pDbConn = pSession->get_dbConn();     
		SOBSession::SDbConnect sDbAIJH2;
		sDbAIJH2.m_pDbConn =  pSession->get_dbConn();
		//pSession->m_mapDbConn.insert(AISTD map<AISTD string,SOBSession::SDbConnect>::value_type( AISTD string("AIJH2"), sDbAIJH2 ) );                                    
	}                                                                                           
	catch(...)                                                                                
	{                                                                                        
		LogAppend(FATAL_LEVEL, "DebugInfo", "初始化数据库容器错误!");              
	}                                                                                                
	LogAppend(DEBUG_LEVEL,"InfoLevel","成功初始化数据库容器");											


	SRepair sRepair;
	CRepair cRepair;
	AISTD string strTaskId;
 	AISTD string strBatchId;
	CBSErrorMsg cErrorMsg;
	//获取修复任务测试	
	//sRepair.get_task(pSession,AISTD string("1|2|3"),MAX_DEAL_DETAIL,strTaskId,strBatchId,cErrorMsg);
	//LogAppend(DEBUG_LEVEL,"InfoLevel",AISTD string("taskId:"+strTaskId).c_str());	
	//LogAppend(DEBUG_LEVEL,"InfoLevel",AISTD string("batchId:"+strBatchId).c_str());	
	AISTD string strCommIn="$TASK_ID$=3:$PLAN_ID$=1:$TASK_REGION$=570:$CMP_ID$=1";


	//测试客户端修复。
	AISTD string in_para="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\
                <Parameter>\
                    <Common>\
                        <task_id paraLink=\"0\">1000</task_id>\
                        <plan_id paraLink=\"0\">1</plan_id>\
                        <task_region paraLink=\"0\">1</task_region>\
                        <cmp_id paraLink=\"0\">1</cmp_id>\
                    </Common>\
                    <Repair>\
                        <url>http://127.0.0.1:8081/</url>\
                        <batch_id>1</batch_id>\                        
                    </Repair>\
                </Parameter>";
	//AISTD string strCommIn="123";
	AISTD string strIn="10001";
	AISTD string strOut;
//	if(0!=(sRepair.gen_repair_record(pSession,strCommIn,strIn,strOut,cErrorMsg)))
//	{
//			LogAppend(FATAL_LEVEL, "DebugInfo", "生成修复工单失败!");          
//	}
	strTaskId="3";
	if(0!=(cRepair.run(pSession,strTaskId,in_para,cErrorMsg)))
	{
			LogAppend(FATAL_LEVEL, "DebugInfo", "修复失败!");          
	}
	return 0;
}

