#include "audit_extend_mgr.h"

#include "obd_adapters.h"
#include "common/base_db_func.h"
#include "openbroker/svr_ctrl.h"

#include "audit_public_mgr.h"
#include "audit_sql_mgr.h"

#include "tool.h"
#include "ftp.h"

#include <vector>
#include <map>

struct RuleStruct
{
        int32 nRuleID;
        Pos2Cond mapPos2Cond;
};

typedef std::map<std::string, std::string> Pos2Cond;
typedef std::vector<RuleStruct> RuleStructVec;
typedef std::vector<RuleStruct>::iterator RuleItr;

int32 CAuditExtendMgr::deal_requestFromRemote
(
	SOBSession* pSession,
	const AISTD string& strSoNbr,
	const AISTD string& strPlatCode,
	const AISTD string& strXml,
	AISTD string& strRspCode,
	AISTD string& strRspDesc,
	CBSErrorMsg& cErrorMsg
)
{
    if ("BDC" == strPlatCode)
    {
        return deal_requestFromBDC(
            pSession,
            strSoNbr,
            StrPlatCode,
            strXml,
            strRspCode,
            strRspDesc,
            cErrorMsg);
    }

    bool bBusiFlag=true;
	
	ob_kernel<MDataAuditDb::CAuditBusiRecordList> cKernel(*(pSession->get_dbConnByName(DB_NGAUDIT)),SCHEMA_NAME);
		
	MDataAuditDb::CAuditBusiRecordList listRecord;
	ob_whereCond cCond;
	cCond << OCS("so_nbr=") << strSoNbr;
	cKernel.select_allExt(listRecord,cCond);
	if (listRecord.size()>0)
	{
		bBusiFlag=false;
		strRspCode=RESP_ERROR_0103;
		strRspDesc="重复业务流水号的交易";
	}
	
	if (bBusiFlag)
	{
		strRspCode=RESP_SUCC;
		strRspDesc="应答成功";
	}
	
	//解析xml
	TiXmlDocument doc;
	doc.Parse(strXml.c_str());
	TiXmlElement* element = doc.RootElement();
	if (!element)
	{
		cErrorMsg.set_errorMsg("获取xml根元素出错");
		ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
		return OBD_FAIL;
	}
	
	TiXmlNode* elementDataType=element->FirstChild();
	if (!elementDataType)
	{
		cErrorMsg.set_errorMsg("获取xml元素DataType出错");
		ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
		return OBD_FAIL;
	}
	
	TiXmlNode* elementConsistencyType=element->IterateChildren(elementDataType);
	if (!elementConsistencyType)
	{
		cErrorMsg.set_errorMsg("获取xml元素ConsistencyType出错");
		ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
		return OBD_FAIL;
	}
	AISTD string strDataType=elementDataType->ToElement()->GetText();
	AISTD string strConsistencyType=elementConsistencyType->ToElement()->GetText();
	
	LogAppend(INFO_LEVEL,"InfoLevel",("数据类别："+strDataType).c_str());
	LogAppend(INFO_LEVEL,"InfoLevel",("数据范围："+strConsistencyType).c_str());
	
/*	
	if (strDataType[2]=='1' && strConsistencyType=="1")
	{
		strRspCode=RESP_ERROR_2010;
		strRspDesc="不支持增量业务信息一致性请求";
	}*/
	
	CBSDateTime dtmCur=get_databaseTime(*pSession->get_dbConn());
	
	MDataAuditDb::CAuditBusiRecord cRecord;
	cRecord.set_soNbr(strSoNbr);
	cRecord.set_sysCode(strPlatCode);
	cRecord.set_content(strXml);
	cRecord.set_stsCode(strRspCode);
	cRecord.set_insertDate(dtmCur);
	cKernel.insert(cRecord);
	
	//特殊流程处理: 实现中央SIMS平台的取数操作
	if (strPlatCode=="SIMS" && strRspCode=="0000")
	{
		if (CAuditExtendMgr::deal_simsReq(pSession,
			strSoNbr,
			cErrorMsg))
		{
			ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
			return OBD_FAIL;
		}
	}
	
	//物联网发起请求的特殊处理
	if (strPlatCode=="PBSS" && strRspCode=="0000")
	{
		//读取配置文件pbss_plan值
		char buf[100] = {0x00};
		static const char* SZ_SECTION = "[application]";
		if ( get_config(SZ_SECTION, "pbss_plan", buf) ) 
		{
			LogAppend(INFO_LEVEL,"InfoLevel","配置文件中没有在[application]中配置pbss_plan参数!");
	  }
	  int64 llPbssPlan=atoi(buf);
		
		//修改pbss_plan执行时间为当前时间dtmCur,流程节点依据pbss和dtmCur读取工单信息(不考虑同时刻有重复请求)
		if (llPbssPlan > 0)
		{
			//audit_cycle_task_info
			ob_whereCond cCond;
			cCond << OCS("cyc_task_id=") << llPbssPlan;
			MDataAuditDb::CAuditCycleTaskInfo cCycle;
			cCycle.set_nextDate(dtmCur);
			cCycle.set_runSts(0);
			ob_kernel<MDataAuditDb::CAuditCycleTaskInfoList> dbCycle(*(pSession->get_dbConn()),SCHEMA_NAME);
			dbCycle.update_ext(cCycle, cCond);
			
			//fc_plan
			AISTD string strUpdateFcPlan("update fc_plan ");
			strUpdateFcPlan.append("set next_run_date=to_date('"+dtmCur.toString("%Y%M%D%H%N%S")+"','YYYYMMDDHH24MISS') ");
			strUpdateFcPlan.append("where is_used=1 and plan_id="+itoa(llPbssPlan));
			otl_nocommit_stream o_fcPlan(1, strUpdateFcPlan.c_str(), *(pSession->get_dbConn()));
			LogAppend(INFO_LEVEL,"InfoLevel",strUpdateFcPlan.c_str());
		}
	}

	return OBD_OK;
}

<<<<<<< .mine
static int32 parse_xmlFromBDC
=======
static int32 deal_requestFromBDC
>>>>>>> .r1185970
(
    const AISTD string& strXml,
    RuleStructVec& ruleStructVec,
    AISTD string& strRspCode,
    AISTD string& strRspDesc,
    CBSErrorMsg& cErrorMsg
)
{
    TiXmlDocument doc;
    doc.Parse(strXml.c_str());

    TiXmlNode* RootNode = 0;
    TiXmlNode* RuleNode = 0;
    TiXmlNode* RuleIdNode = 0;
    TiXmlNode* ConditionNode = 0;
    TiXmlNode* AuditPosNode = 0;
    TiXmlNode* WhereCondNode = 0;
    TiXmlElement* RuleElmt = 0;

    AISTD string strAuditPos = "";
    AISTD string strWhereCond = "";
    
    int32 nRuleId = 0; 

    RuleStruct ruleStruct;
    
    RootNode = doc.FirstChild("DAUDITREQ");
    if (!RootNode)
    {
        cErrorMsg.set_errorMsg("获取DAUDITREQ节点失败");
        ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
        return OBD_FAIL;
    }

    while (RuleNode = RootNode->IterateChildren("AUDITRULE", null))
    {
        RuleIdNode = RuleNode->FirstChild("RULEID");
        if (!RuleIdNode)
        {
            cErrorMsg.set_errorMsg("获取RULEID节点失败");
            ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
            return OBD_FAIL;
        }

        nRuleId = itoa(RuleIdNode->ToElement()->GetText());
        if (nRuleId <= 0)
        {
            cErrorMsg.set_errorMsg("RULEID节点不是有效数字");
            ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
            return OBD_FAIL;
        }

        ruleStruct.nRuleId = nRuleId;
        Pos2Cond pos2Cond;

        while (ConditionNode = RuleNode->IterateChildren("CONDITION", null))
        {
            AuditPosNode = ConditionNode->FirstChild("AUDITPOS");
            if (!AuditPosNode)
            {
                cErrorMsg.set_errorMsg("获取AUDITPOS节点失败");
                ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
                return OBD_FAIL;
            }

            strAuditPos = AuditPosNode->ToElement()->GetText();
            if (strAuditPos.empty())
            {
                cErrorMsg.set_errorMsg("AUDITPOS节点数据为空");
                ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
                return OBD_FAIL;
            }

            // 如果有重复的pos算是一种错误
            if (std::map::end == pos2Cond.find(strAuditPos))
            {
                cErrorMsg.set_errorMsg("AUDITPOS有重复");
                ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
                return OBD_FAIL; 
            }

            WhereCondNode = ConditionNode->FirstChild("WHERECOND");
            if (!WhereCondNode)
            {
                cErrorMsg.set_errorMsg("获取WHERECOND节点失败");
                ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
                return OBD_FAIL;
            }

            strWhereCond = WhereCondNode->ToElement()->GetText();

            pos2Cond.insert(std::pair<std::string, std::string>(strAuditPos, strWhereCond));
        }
        
        ruleStruct.mapPos2Cond = pos2Cond;
        ruleStructVec.push_back(ruleStruct);
    }
 
    return 0;
}

static int32 chk_xmlFromBDC
(
    const AISTD string& strXml,
    const RuleStructVec& ruleStructVec,
    AISTD string& strRspCode,
    AISTD string& strRspDesc,
    CBSErrorMsg& cErrorMsg
)
{
    return 0;
}

static int32 deal_requestFromBDC
(
    SOBSession* pSession,
    const AISTD string& strSoNbr,
    const AISTD string& strPlatCode,
    const AISTD string& strXml,
    AISTD string& strRspCode,
    AISTD string& strRspDesc,
    CBSErrorMsg& cErrorMsg
)
{
    /*
      1.根据平台编号，规则组编号在AUDIT_PROVISION表中找到
        任务号最大的任务，如果任务还在运行则返回错误代码；
      2.根据平台编号，规则组编号在AUDIT_RULE_PLAN_MAPPING表
        中找到对应的计划，将请求报文中的条件拼接到计划中，
        并启动计划；
      3.将新建的任务和相应的平台编号，规则组编号，外围系统
        流水号等信息记录在AUDIT_PROVISION表中。
     */

//    ob_kernel<MDataAuditDb::CAuditProvision>

    RuleStructVec ruleStructVec;

    // 解析报文
    if (parse_xmlFromBDC(
            strXml,
            ruleStructVect,
            strRspCode,
            strRspDesc,
            cErrorMsg) != 0)
    {
        return OBD_FAIL;
    }

    // 校验请求

    // 处理请求

    return 0;
}

int32 CAuditExtendMgr::deal_simsReq
(
	SOBSession* pSession,
	const AISTD string strSoNbr,
	CBSErrorMsg& cErrorMsg
)
{
	otl_connect &db=*(pSession->get_dbConnByName(DB_NGAUDIT));
	
	int64 llTaskId=0;
	
	if (CAuditPublicMgr::get_sequence_ext(pSession,
		DB_NGAUDIT,"seq_audit_task_id",llTaskId,cErrorMsg))
	{
		cErrorMsg.set_hint("获取SEQ错误");
		return OBD_FAIL;
	}
	CBSDateTime dtmCur=get_databaseTime(db);
	MDataAuditDb::CAuditTaskAll cATask;
	cATask.set_taskId(llTaskId);
	cATask.set_taskType(0);
	cATask.set_dataId(1);
	cATask.set_dataName("SIMS平台发起取数业务");
	cATask.set_taskStatus(0);
	cATask.set_stepId(10);
	cATask.set_soNbr(strSoNbr);
	cATask.set_busiCode("1000");
	cATask.set_createDate(dtmCur);
	cATask.set_handleDate(atoi(dtmCur.toString("%Y%M%D").c_str()));
	cATask.set_handleMonth(atoi(dtmCur.toString("%Y%M").c_str()));
	cATask.set_nextDate(dtmCur);
	cATask.set_handleRegion(0);
	ob_kernel<MDataAuditDb::CAuditTaskAllList> cKernel(db,SCHEMA_NAME);
	cKernel.insert(cATask);
	
	MDataAuditDb::CAuditTaskFileLog cLog;
	cLog.set_taskId(llTaskId);
	cLog.set_fileId(0);
	cLog.set_stepId(10);
	cLog.set_stepSts(0);
	ob_kernel<MDataAuditDb::CAuditTaskFileLogList> dbLog(db,SCHEMA_NAME);
	dbLog.insert(cLog);
	
	return OBD_OK;
}

int32 CAuditExtendMgr::gen_questionData
(
  SOBSession* pSession,
  const int16& nSystemId,
  const int32& iMachineId,
  const AISTD string& strOpTime,
  const int16& nIsUpload,
  const int64& llTaskId,
  CBSErrorMsg& cErrorMsg
)
{
	//选择待生成的明细编号
	ob_whereCond cCond;
	cCond << OCS("task_id=") << llTaskId;
	MDataAuditDb::CAuditTaskAllList listTask;
	ob_kernel<MDataAuditDb::CAuditTaskAllList> dbTask(*(pSession->get_dbConn()),SCHEMA_NAME);	
	dbTask.select_allExt(listTask,cCond);
	if (listTask.size()<1)
	{
		cErrorMsg.set_hint("找不到该任务编号的任务信息");
		return OBD_FAIL;
	}
	
	int16 nRuleType=listTask[0].get_ruleType();
	if (nRuleType==2)
	{
		cErrorMsg.set_hint("暂不支持规则组的问题数据工单生成");
		return OBD_FAIL;
	}
	int32 iDataId=listTask[0].get_dataId();
	int32 iHandleMonth=listTask[0].get_handleMonth();
	
	MDataAuditDb::CAuditDataDefineAllList listAuditDefine;
	ob_kernel<MDataAuditDb::CAuditDataDefineAllList> dbAuditDefine(*(pSession->get_dbConn()),SCHEMA_NAME);
	cCond.clear();
	cCond << OCS("is_used=1 and data_id=") << iDataId;
	dbAuditDefine.select_allExt(listAuditDefine,cCond);
	if (listAuditDefine.size()<1)
	{
		cErrorMsg.set_hint("找不到该稽核编号的稽核规则信息");
		return OBD_FAIL;
	}
	int16 nSrcSystemId=listAuditDefine[0].get_srcSystemId();
	int16 nDesSystemId=listAuditDefine[0].get_desSystemId();
	AISTD string strSrcTable=listAuditDefine[0].get_srcTableName();
	AISTD string strDesTable=listAuditDefine[0].get_desTableName();
	AISTD string strSrcSecondConfirm=listAuditDefine[0].get_srcSecondPrimaryScript();
	AISTD string strDesSecondConfirm=listAuditDefine[0].get_desSecondPrimaryScript();
	
	int32 iDiffTatolNums=listTask[0].get_initialDistinctNumber();
	int32 iDiffSrcNums=listTask[0].get_srcInNumber();
	int32 iDiffDesNums=listTask[0].get_desInNumber();
	
	int32 iSrcSelectNums=0;//差异类型1的生成条数
	int32 iDesSelectNums=0;//差异类型2的生成条数
	
	LogAppend(INFO_LEVEL, "InfoLevel", ("差异条数:"+itoa(iDiffTatolNums)).c_str());
	LogAppend(INFO_LEVEL, "InfoLevel", ("差异1条数:"+itoa(iDiffSrcNums)).c_str());
	LogAppend(INFO_LEVEL, "InfoLevel", ("差异2条数:"+itoa(iDiffDesNums)).c_str());
	if (iDiffTatolNums>0 && iDiffTatolNums<=30)
	{
		iSrcSelectNums=iDiffSrcNums;
		iDesSelectNums=iDiffDesNums;
	}
	else if (iDiffTatolNums>30 && iDiffTatolNums<=100)
	{
		if (iDiffSrcNums==0)
		{
			iSrcSelectNums=0,iDesSelectNums=30;
		}
		else
		{
			double quot=iDiffDesNums/iDiffSrcNums;
			if (quot>4.0)
			{
				iSrcSelectNums=iDiffSrcNums;
				iDesSelectNums=30-iSrcSelectNums;
			}
			else if (quot<4.0)
			{
				iDesSelectNums=iDiffDesNums;
				iSrcSelectNums=30-iDesSelectNums;
			}
			else
			{
				iSrcSelectNums=(int32)(iDiffSrcNums*0.2);
				iDesSelectNums=(int32)(iDiffDesNums*0.8);
			}
		}
	}
	else if (iDiffTatolNums>100)
	{
		if (iDiffDesNums>=80 && iDiffSrcNums>=20)
		{
			iSrcSelectNums=20;//(int32)(iDiffSrcNums*0.2);
			iDesSelectNums=80;//(int32)(iDiffDesNums*0.8);
		}
		else if (iDiffDesNums>80 && iDiffSrcNums<20)
		{
			iSrcSelectNums=iDiffSrcNums;
			iDesSelectNums=100-iSrcSelectNums;
		}
		else if (iDiffDesNums<20 && iDiffSrcNums>80)
		{
			iDesSelectNums=iDiffDesNums;
			iSrcSelectNums=100-iDesSelectNums;
		}
	}
	else
	{
		cErrorMsg.set_hint("稽核无差异，无须生成问题数据工单");
		return OBD_FAIL;
	}
	LogAppend(INFO_LEVEL, "InfoLevel", ("差异类型1的生成条数:"+itoa(iSrcSelectNums)).c_str());
	LogAppend(INFO_LEVEL, "InfoLevel", ("差异类型2的生成条数:"+itoa(iDesSelectNums)).c_str());
	
	char buf[100];
	static const char* SZ_SECTION = "[application]";
	if ( get_config(SZ_SECTION, "ProvCode", buf) ) 
	{
		cErrorMsg.set_errorMsg("未配置省份编码");
		cErrorMsg.set_hint("配置文件中没有在[application]中配置ProvCode参数!");
  	return OBD_FAIL;  	
  }
  AISTD string strProvCode=AISTD string(buf);
  
  if ( get_config(SZ_SECTION, "ProFileDir", buf) ) 
	{
		cErrorMsg.set_errorMsg("未配置存放问题数据工单的文件目录");
		cErrorMsg.set_hint("配置文件中没有在[application]中配置ProFileDir参数!");
  	return OBD_FAIL;  	
  }
  AISTD string strProFileDir=AISTD string(buf);
  
  if (access(strProFileDir.c_str(),F_OK)!=0)
	{
		cErrorMsg.set_hint("问题数据工单的文件目录"+strProFileDir+"不存在");
  	return OBD_FAIL;
	}
	
	MDataAuditDb::CAuditSystemDefineList listSrcSystem;
  if (CAuditSqlMgr::get_auditSystemDefine(pSession,
  	nSrcSystemId,listSrcSystem,cErrorMsg))
  {
		return OBD_FAIL;
  }
  if (listSrcSystem.size()!=1)
  {
    cErrorMsg.set_errorMsg("系统定义数据错误!");
    return OBD_FAIL;
  }
  AISTD string strSrcDb=listSrcSystem[0].get_systemDbName();
  int16 nSrcSystemTeam=listSrcSystem[0].get_systemTeam();
  
  MDataAuditDb::CAuditSystemDefineList listDesSystem;
  if (CAuditSqlMgr::get_auditSystemDefine(pSession,
  	nDesSystemId,listDesSystem,cErrorMsg))
  {
		return OBD_FAIL;
  }
  if (listDesSystem.size()!=1)
  {
    cErrorMsg.set_errorMsg("系统定义数据错误!");
    return OBD_FAIL;
  }
  AISTD string strDesDb=listDesSystem[0].get_systemDbName();
  int16 nDesSystemTeam=listDesSystem[0].get_systemTeam();
  AISTD string strPlatCode=listDesSystem[0].get_systemCode();
  
  CBSDateTime dtmCur=get_databaseTime((*pSession->get_dbConn()));
  AISTD string strYMD=dtmCur.toString("%Y%M%D");
  
  //PRO_BOSS_571_$平台编号$_$YYYYMMDD$_$TASK$.txt
  AISTD string strFilename="PRO_BOSS_"+strProvCode+"_"+strPlatCode;
  strFilename+="_"+strYMD+"_"+itoa(llTaskId)+".txt";
  
	AISTD string strLocalFile=strProFileDir+"/"+strFilename;
  
  try
	{
		TCFileStream tcFile;
		if (tcFile.Open(strLocalFile,omWrite)!=0)
		{
			cErrorMsg.set_errorMsg("创建文件["+strLocalFile+"]失败!");
			ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
			return OBD_FAIL;
		}
		LogAppend(INFO_LEVEL, "InfoLevel", ("问题数据工单文件:"+strLocalFile).c_str());

	  AISTD string strFileHead;
		strFileHead="10,BOSS"+strProvCode+",";
		strFileHead+=time_to_str(dtmCur,"%Y%M%D%H%N%S")+",";
		strFileHead+=itoa(iDesSelectNums+iSrcSelectNums)+"";
		LogAppend(INFO_LEVEL, "InfoLevel", ("文件头记录:"+strFileHead).c_str());
		tcFile.WriteLn(strFileHead);
		
		AISTD string strResultTable="audit_task_result_all_"+itoa(iHandleMonth);
		ob_kernel<MDataAuditDb::CAuditTaskResultAllList> dbResult(*(pSession->get_dbConn()),SCHEMA_NAME);
		//处理差异类型1的数据
		if (iSrcSelectNums>0)
		{ 
			//AISTD string strSrcTable="AUDIT_MGIS_BOSS_$TASK$_S";
			AISTD string strSrcSqlBig;
			strSrcSqlBig="select MSISDN,OPR_TYPE,OPR_TIME,";
			strSrcSqlBig+="SP_CODE,OPER_CODE,THIRD_DN";
			strSrcSqlBig+=" from "+strSrcTable;
			strSrcSqlBig+=" where "+strSrcSecondConfirm;
			//"Msisdn='$1' AND Sp_Code='$2' AND Oper_Code='$3'";
			CDMCTool::replace_string(strSrcSqlBig,"$TASK$",itoa(llTaskId));

			MDataAuditDb::CAuditTaskResultAllList listSrcResult;
			cCond.clear();
			cCond << OCS("distinct_type=1 and task_id=") << llTaskId;
			cCond << OCS(" and rownum<=") << iSrcSelectNums;
			dbResult.select_allExt(listSrcResult,cCond,strResultTable.c_str());
			for (int i=0;i<listSrcResult.size();i++)
			{
				AISTD string strPrimaryInfo=listSrcResult[i].get_primaryInfo();

				AISTD string strSrcSql=strSrcSqlBig;
				AISTD string strTemp;
				CAuditPublicMgr::replace_condition(strPrimaryInfo,strSrcSql,strTemp);
				LogAppend(INFO_LEVEL, "InfoLevel", ("查询语句:"+strSrcSql).c_str());
					
				otl_nocommit_stream osSrc;
				try
				{
					int16 nSrcSystemType=listSrcSystem[0].get_systemType();
					if (nSrcSystemType==1 || nSrcSystemType==3)
						osSrc.open(1, strSrcSql.c_str(),*(pSession->get_dbConn()));
					else
						osSrc.open(1, strSrcSql.c_str(),*(pSession->get_dbConnByName(strSrcDb)));
			    osSrc.flush();
			  }
			  catch(otl_exception& p)
			  {
			  	unlink(strLocalFile.c_str());
			    cErrorMsg.set_errorMsg(OTL_EXCEPTION_INFO(p));
			    cErrorMsg.set_hint("数据库错误，或SQL语法错误，请检查关联的文件字段定义");
			    return OBD_FAIL;
			  }
			  
			  char szMsisdn[100]={0x00};
				char szOprType[100]={0x00};
				char szOprTime[100]={0x00};
				char szSpCode[100]={0x00};
				char szOperCode[100]={0x00};
				char szThirdDn[100]={0x00};
		
			  while(!osSrc.eof())
			  {
					try
					{
						osSrc >> szMsisdn >> szOprType >> szOprTime >> szSpCode >> szOperCode >> szThirdDn;
					}
					catch(otl_exception& p)
				  {
				  	unlink(strLocalFile.c_str());
				    cErrorMsg.set_errorMsg(OTL_EXCEPTION_INFO(p));
				    cErrorMsg.set_hint("数据库错误!");
				    return OBD_FAIL;
				  }
					break;
			  }
			  osSrc.close();
			  
			  //组织文件记录体
			  AISTD string strRecord;
			  strRecord="50,BOSS"+strProvCode+","+strProvCode+","+strPlatCode+",02,00,";
			  strRecord+=(AISTD string)szMsisdn+","+(AISTD string)szOprType+","+(AISTD string)szOprTime+", , , , ,";
			  if (strPlatCode=="0017")
			  	strRecord+="9999,";
			  else
			  	strRecord+=(AISTD string)szSpCode+",";
			  strRecord+=" ,";
			  if ((AISTD string)szMsisdn==(AISTD string)szThirdDn)
			  	strRecord+="0";
			  else
			  	strRecord+=(AISTD string)szThirdDn;
			  LogAppend(INFO_LEVEL, "InfoLevel", ("文件记录体:"+strRecord).c_str());
			  tcFile.WriteLn(strRecord);
			}
		}
		
		//处理差异类型2的数据
		if (iDesSelectNums>0)
		{
			//AISTD string strDesTable="AUDIT_MGIS_PLAT_$TASK$_D";
			AISTD string strDesSqlBig;
			//strDesSqlBig="select MSISDN,OPR_TYPE,OPR_TIME,CHRG_TYPE,";
			strDesSqlBig="select MSISDN,DECODE(TO_CHAR(OPR_TYPE),'06','00','04','01','14','01','07','01',TO_CHAR(OPR_TYPE)),OPR_TIME,";
			//strDesSqlBig+="SP_CODE,OPER_CODE,THIRD_DN,LAST_ORDER_TIME";
			strDesSqlBig+="SP_CODE,OPER_CODE,THIRD_DN";
			strDesSqlBig+=" from "+strDesTable;
			strDesSqlBig+=" where "+strDesSecondConfirm;
			//"Msisdn='$1' AND Sp_Code='$2' AND Oper_Code='$3'";
			CDMCTool::replace_string(strDesSqlBig,"$TASK$",itoa(llTaskId));
			
			cCond.clear();
			cCond << OCS("distinct_type=2 and task_id=") << llTaskId;
			cCond << OCS(" and rownum<=") << iDesSelectNums;
			MDataAuditDb::CAuditTaskResultAllList listDesResult;
			dbResult.select_allExt(listDesResult,cCond,strResultTable.c_str());
			for (int i=0;i<listDesResult.size();i++)
			{
				AISTD string strPrimaryInfo=listDesResult[i].get_primaryInfo();
				
				AISTD string strDesSql=strDesSqlBig;
				AISTD string strTemp;
				CAuditPublicMgr::replace_condition(strPrimaryInfo,strTemp,strDesSql);
				LogAppend(INFO_LEVEL, "InfoLevel", ("查询语句:"+strDesSql).c_str());
					
				otl_nocommit_stream osDes;
				try
				{
					int16 nDesSystemType=listDesSystem[0].get_systemType();
					if (nDesSystemType==1 || nDesSystemType==3)
						osDes.open(1, strDesSql.c_str(),*(pSession->get_dbConn()));
					else
						osDes.open(1, strDesSql.c_str(),*(pSession->get_dbConnByName(strSrcDb)));
			    osDes.flush();
			  }
			  catch(otl_exception& p)
			  {
			  	unlink(strLocalFile.c_str());
			    cErrorMsg.set_errorMsg(OTL_EXCEPTION_INFO(p));
			    cErrorMsg.set_hint("数据库错误，或SQL语法错误，请检查关联的文件字段定义");
			    return OBD_FAIL;
			  }
			  
			  char szMsisdn[100]={0x00};
				char szOprType[100]={0x00};
				char szOprTime[100]={0x00};
				char szSpCode[100]={0x00};
				char szOperCode[100]={0x00};
				char szThirdDn[100]={0x00};
		
			  while(!osDes.eof())
			  {
					try
					{
						osDes >> szMsisdn >> szOprType >> szOprTime >> szSpCode >> szOperCode >> szThirdDn;
					}
					catch(otl_exception& p)
				  {
				  	unlink(strLocalFile.c_str());
				    cErrorMsg.set_errorMsg(OTL_EXCEPTION_INFO(p));
				    cErrorMsg.set_hint("数据库错误!");
				    return OBD_FAIL;
				  }
					break;
			  }
			  osDes.close();
			  
			  //组织文件记录体
			  AISTD string strRecord;
			  strRecord="50,BOSS"+strProvCode+","+strProvCode+","+strPlatCode+",02,";
			  if (nDesSystemTeam==30)//30－MISC业务
			  	strRecord+="01,";//01：只在misc/vgop有；
			  else
			  	strRecord+="02,";//02：只在平台有；
			  if (nDesSystemTeam==30)
			  	strRecord+=(AISTD string)szMsisdn+", , ,"+(AISTD string)szOprType+","+(AISTD string)szOprTime+", , ,";
			  else
			  	strRecord+=(AISTD string)szMsisdn+", , , , ,"+(AISTD string)szOprType+","+(AISTD string)szOprTime+",";
			  if (strPlatCode=="0017")
			  	strRecord+="9999,";
			  else
			  	strRecord+=(AISTD string)szSpCode+",";
			  strRecord+=" ,";
			  if ((AISTD string)szMsisdn==(AISTD string)szThirdDn)
			  	strRecord+="0";
			  else
			  	strRecord+=(AISTD string)szThirdDn;
			  LogAppend(INFO_LEVEL, "InfoLevel", ("文件记录体:"+strRecord).c_str());
			  tcFile.WriteLn(strRecord);
			}
		}
		
		AISTD string strFileTail;
		strFileTail="90,BOSS"+strProvCode+",";
		strFileTail+=itoa(iDesSelectNums+iSrcSelectNums)+"";
		LogAppend(INFO_LEVEL, "InfoLevel", ("文件尾记录:"+strFileTail).c_str());
		tcFile.WriteLn(strFileTail);
		
		tcFile.Close();
	}
	catch(TCException tce)
	{
		cErrorMsg.set_errorMsg(tce.GetExceptionMessage());
		ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
		return OBD_FAIL;
	}
	
	//上传
	if (nIsUpload==1)
	{
		cCond.clear();
		cCond << OCS("is_used=1 and machine_id=") << iMachineId;
		ob_kernel<MDataAuditDb::CAuditMachineInfoList> dbMachine(*(pSession->get_dbConn()),SCHEMA_NAME);
		MDataAuditDb::CAuditMachineInfoList listMachine;
		dbMachine.select_allExt(listMachine,cCond);
		if (listMachine.empty())
		{
			cErrorMsg.set_errorMsg("机器编号"+itoa(iMachineId)+"查询无记录");
		  ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
			return OBD_FAIL;
		}
		AISTD string strIp=listMachine[0].get_addrIp();
		int16 nPort=listMachine[0].get_addrPort();
		AISTD string strUser=listMachine[0].get_userName();
		AISTD string strPasswd=CBSSystem::del_key(listMachine[0].get_password());
		AISTD string strRemoteFile=listMachine[0].get_respRemotePath()+"/"+strFilename;
	
		CFtp cFtp(strIp.c_str(),nPort);
		if (!cFtp.Login(strUser.c_str(),strPasswd.c_str()))
	  {
	  	cErrorMsg.set_errorMsg("ftp登录失败:"+AISTD string(cFtp.GetErrorMsg()));
	  	ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
	  	return OBD_FAIL;
	  }
	  LogAppend(INFO_LEVEL, "InfoLevel", ("服务器["+strIp+"]已登录").c_str());
	  
	  LogAppend(INFO_LEVEL, "InfoLevel",("上传文件["+strLocalFile+"]至["+strRemoteFile+".tmp"+"]").c_str());
	  if (!cFtp.Put(strLocalFile.c_str(),(strRemoteFile+".tmp").c_str()))
	  {
	    cErrorMsg.set_errorMsg("ftp上传文件失败:"+AISTD string(cFtp.GetErrorMsg()));
	    ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
	    cFtp.Logout();
	    return OBD_FAIL;
	  }
	  if (!cFtp.Rename((strRemoteFile+".tmp").c_str(),strRemoteFile.c_str()))
	  {
	    cErrorMsg.set_errorMsg("ftp文件更名失败:"+AISTD string(cFtp.GetErrorMsg()));
	    ERROR_LOG(FATAL_LEVEL, cErrorMsg, ERRORARGS);
	    cFtp.Logout();
	    return OBD_FAIL;
	  }
		LogAppend(INFO_LEVEL, "InfoLevel", "上传并更名完毕");
		cFtp.Logout();
	}
	
	return OBD_OK;
}
