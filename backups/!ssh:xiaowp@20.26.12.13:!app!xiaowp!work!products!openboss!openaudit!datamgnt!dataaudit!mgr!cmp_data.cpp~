#include "cmp_data.h"

CmpData::CmpData(int nSrcCount) :
    m_nCurSrc(-1),
    m_bIsSrcVal(true),
    m_nSrcCount(nSrcCount)
{
    m_listSrcData.resize(nSrcCount);
}

CmpData::~CmpData()
{
}

int CmpData::setKey (
    const StringList& listColType,
    const StringList& listKeyName,
    const StringList& listKeyValue)    
{
    LogAppend(DEBUG_LEVEL,"InfoLevel","enter CmpData::setKey ok.");

    // 三个参数的长度要相同
    if (listColType.size() != listKeyName.size() ||
        listColType.size() != listKeyValue.size())
    {
        LogAppend(DEBUG_LEVEL,"InfoLevel","error: size of listColType listKeyName listKeyValue is not equal.");
        return -1;
    }

    StringList::iterator itrType = listColType.begin();
    StringList::iterator itrName = listKeyName.begin();
    StringList::iterator itrValue = listKeyValue.begin();

    for (; itrType != listColType.end(); itrType ++, itrName ++, itrValue ++)
    {
        m_mapName2Type[*itrName] = *itrType;
        m_mapKey2Value[*itrName] = *itrValue;
    }
    
    LogAppend(DEBUG_LEVEL,"InfoLevel","leave CmpData::setKey ok.");
    return 0;
}

int addColInfo (
    const AISTD string& strSrc,
    const StringList& listColType,
    const StringList& listColName)
{
    LogAppend(DEBUG_LEVEL,"InfoLevel","enter addColInfo ok.");

    if (listColType.size() != listColName.size())
    {
        LogAppend(DEBUG_LEVEL,"InfoLevel","error: size of listColType listColName is not equal.");
        return -1;
    }

    int nSrc = atoi(strSrc);
    if (nSrc < 1 || nSrc > m_nSrcCount)
    {
        LogAppend(DEBUG_LEVEL,"InfoLevel","error: strSrc is not valid.");
        return -1;
    }

    StringList::iterator itrType = listColType.begin();
    StringList::iterator itrName = listColName.begin();
    for (; itrType != listColType.end(); itrType ++, itrName ++)
    {
        m_mapName2Type[*itrName] = *itrType;

        StringList listVal;
        m_listSrcData[nSrc-1][*itrName] = listVal;
    }
    
    LogAppend(DEBUG_LEVEL,"InfoLevel","leave addColInfo ok.");
    return 0;
}

CmpData& CmpData::operator << (const AISTD string& strData)
{
    if (m_bIsSrcVal)
    {
        m_bIsSrcVal = false;
        
    }
}
